Prog "Curry.Ident" ["Curry.SpanInfo","Prelude"] [Type ("Curry.Ident","ModuleIdent") Public [] [Cons ("Curry.Ident","ModuleIdent") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]],Type ("Curry.Ident","Ident") Public [] [Cons ("Curry.Ident","Ident") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","Int") []]],Type ("Curry.Ident","QualIdent") Public [] [Cons ("Curry.Ident","QualIdent") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","Maybe") [TCons ("Curry.Ident","ModuleIdent") []],TCons ("Curry.Ident","Ident") []]]] [Func ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.ModuleIdent") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Ident","ModuleIdent") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.ModuleIdent") [],Comb FuncCall ("Curry.Ident","_impl#/=#Prelude.Eq#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.ModuleIdent") 2 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Ident","ModuleIdent") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","ModuleIdent") [5,6]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []],Var 4,Var 6])])])),Func ("Curry.Ident","_impl#/=#Prelude.Eq#Curry.Ident.ModuleIdent") 0 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.ModuleIdent") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Curry.Ident","ModuleIdent") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.ModuleIdent") [],Comb (FuncPartCall 2) ("Curry.Ident","_impl#compare#Prelude.Ord#Curry.Ident.ModuleIdent") [],Comb FuncCall ("Curry.Ident","_impl#<=#Prelude.Ord#Curry.Ident.ModuleIdent") [],Comb FuncCall ("Curry.Ident","_impl#>=#Prelude.Ord#Curry.Ident.ModuleIdent") [],Comb FuncCall ("Curry.Ident","_impl#<#Prelude.Ord#Curry.Ident.ModuleIdent") [],Comb FuncCall ("Curry.Ident","_impl#>#Prelude.Ord#Curry.Ident.ModuleIdent") [],Comb FuncCall ("Curry.Ident","_impl#min#Prelude.Ord#Curry.Ident.ModuleIdent") [],Comb FuncCall ("Curry.Ident","_impl#max#Prelude.Ord#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#compare#Prelude.Ord#Curry.Ident.ModuleIdent") 2 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Ident","ModuleIdent") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","ModuleIdent") [5,6]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Char") []]],Var 4],Var 6])])])),Func ("Curry.Ident","_impl#<=#Prelude.Ord#Curry.Ident.ModuleIdent") 0 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<=#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#>=#Prelude.Ord#Curry.Ident.ModuleIdent") 0 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#<#Prelude.Ord#Curry.Ident.ModuleIdent") 0 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#>#Prelude.Ord#Curry.Ident.ModuleIdent") 0 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#min#Prelude.Ord#Curry.Ident.ModuleIdent") 0 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Curry.Ident","ModuleIdent") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#max#Prelude.Ord#Curry.Ident.ModuleIdent") 0 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Curry.Ident","ModuleIdent") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Ident.ModuleIdent") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Ident","ModuleIdent") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Ident","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.ModuleIdent") [],Comb (FuncPartCall 2) ("Curry.Ident","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.ModuleIdent") 1 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Ident","ModuleIdent") [2,3]) (Var 2)])),Func ("Curry.Ident","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.ModuleIdent") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Curry.Ident","ModuleIdent") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","ModuleIdent") [3,4]) (Comb ConsCall ("Curry.Ident","ModuleIdent") [Var 1,Var 4])])),Func ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Ident","Ident") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Ident","_impl#/=#Prelude.Eq#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") 2 Public (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Ident","Ident") [3,4,5]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","Ident") [6,7,8]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,)") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") []],Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Comb ConsCall ("Prelude","(,)") [Var 4,Var 5],Comb ConsCall ("Prelude","(,)") [Var 7,Var 8]])])])),Func ("Curry.Ident","_impl#/=#Prelude.Eq#Curry.Ident.Ident") 0 Public (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") []])),Func ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.Ident") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Curry.Ident","Ident") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Comb (FuncPartCall 2) ("Curry.Ident","_impl#compare#Prelude.Ord#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Ident","_impl#<=#Prelude.Ord#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Ident","_impl#>=#Prelude.Ord#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Ident","_impl#<#Prelude.Ord#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Ident","_impl#>#Prelude.Ord#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Ident","_impl#min#Prelude.Ord#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Ident","_impl#max#Prelude.Ord#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#compare#Prelude.Ord#Curry.Ident.Ident") 2 Public (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Ident","Ident") [3,4,5]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","Ident") [6,7,8]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,)") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Char") []],Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Int") []],Comb ConsCall ("Prelude","(,)") [Var 4,Var 5]],Comb ConsCall ("Prelude","(,)") [Var 7,Var 8]])])])),Func ("Curry.Ident","_impl#<=#Prelude.Ord#Curry.Ident.Ident") 0 Public (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<=#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#>=#Prelude.Ord#Curry.Ident.Ident") 0 Public (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#<#Prelude.Ord#Curry.Ident.Ident") 0 Public (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#>#Prelude.Ord#Curry.Ident.Ident") 0 Public (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#min#Prelude.Ord#Curry.Ident.Ident") 0 Public (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Curry.Ident","Ident") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#max#Prelude.Ord#Curry.Ident.Ident") 0 Public (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Curry.Ident","Ident") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.Ident") []])),Func ("Curry.Ident","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Ident.Ident") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Ident","Ident") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Ident","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.Ident") [],Comb (FuncPartCall 2) ("Curry.Ident","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.Ident") 1 Public (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Ident","Ident") [2,3,4]) (Var 2)])),Func ("Curry.Ident","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.Ident") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Curry.Ident","Ident") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","Ident") [3,4,5]) (Comb ConsCall ("Curry.Ident","Ident") [Var 1,Var 4,Var 5])])),Func ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.QualIdent") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Ident","QualIdent") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [],Comb FuncCall ("Curry.Ident","_impl#/=#Prelude.Eq#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") 2 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Ident","QualIdent") [3,4,5]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","QualIdent") [6,7,8]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,)") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Maybe") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.ModuleIdent") []],Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Comb ConsCall ("Prelude","(,)") [Var 4,Var 5],Comb ConsCall ("Prelude","(,)") [Var 7,Var 8]])])])),Func ("Curry.Ident","_impl#/=#Prelude.Eq#Curry.Ident.QualIdent") 0 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.QualIdent") 0 Public (TCons ("Prelude","_Dict#Ord") [TCons ("Curry.Ident","QualIdent") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.QualIdent") [],Comb (FuncPartCall 2) ("Curry.Ident","_impl#compare#Prelude.Ord#Curry.Ident.QualIdent") [],Comb FuncCall ("Curry.Ident","_impl#<=#Prelude.Ord#Curry.Ident.QualIdent") [],Comb FuncCall ("Curry.Ident","_impl#>=#Prelude.Ord#Curry.Ident.QualIdent") [],Comb FuncCall ("Curry.Ident","_impl#<#Prelude.Ord#Curry.Ident.QualIdent") [],Comb FuncCall ("Curry.Ident","_impl#>#Prelude.Ord#Curry.Ident.QualIdent") [],Comb FuncCall ("Curry.Ident","_impl#min#Prelude.Ord#Curry.Ident.QualIdent") [],Comb FuncCall ("Curry.Ident","_impl#max#Prelude.Ord#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#compare#Prelude.Ord#Curry.Ident.QualIdent") 2 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Prelude","Ordering") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Ident","QualIdent") [3,4,5]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","QualIdent") [6,7,8]) (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#compare#Prelude.Ord#(,)") [Comb FuncCall ("Prelude","_inst#Prelude.Ord#Prelude.Maybe") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.ModuleIdent") []],Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.Ident") []],Comb ConsCall ("Prelude","(,)") [Var 4,Var 5]],Comb ConsCall ("Prelude","(,)") [Var 7,Var 8]])])])),Func ("Curry.Ident","_impl#<=#Prelude.Ord#Curry.Ident.QualIdent") 0 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<=#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#>=#Prelude.Ord#Curry.Ident.QualIdent") 0 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>=#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#<#Prelude.Ord#Curry.Ident.QualIdent") 0 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#<#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#>#Prelude.Ord#Curry.Ident.QualIdent") 0 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#>#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#min#Prelude.Ord#Curry.Ident.QualIdent") 0 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Curry.Ident","QualIdent") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#min#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#max#Prelude.Ord#Curry.Ident.QualIdent") 0 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Curry.Ident","QualIdent") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#max#Prelude.Ord") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Ord#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Ident.QualIdent") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Ident","QualIdent") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Ident","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.QualIdent") [],Comb (FuncPartCall 2) ("Curry.Ident","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.QualIdent") 1 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Ident","QualIdent") [2,3,4]) (Var 2)])),Func ("Curry.Ident","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Ident.QualIdent") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Curry.Ident","QualIdent") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","QualIdent") [3,4,5]) (Comb ConsCall ("Curry.Ident","QualIdent") [Var 1,Var 4,Var 5])])),Func ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.ModuleIdent") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Ident","ModuleIdent") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Ident","_impl#show#Prelude.Show#Curry.Ident.ModuleIdent") [],Comb (FuncPartCall 2) ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.ModuleIdent") [],Comb FuncCall ("Curry.Ident","_impl#showList#Prelude.Show#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#show#Prelude.Show#Curry.Ident.ModuleIdent") 0 Public (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.ModuleIdent") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","ModuleIdent") [3,4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") []],Lit (Intc 11)],Var 4]]]]])])),Func ("Curry.Ident","_impl#showList#Prelude.Show#Curry.Ident.ModuleIdent") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","ModuleIdent") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.ModuleIdent") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Ident","ModuleIdent") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent") [],Comb FuncCall ("Curry.Ident","_impl#readList#Prelude.Read#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent._#lambda1") []],Var 2])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent._#lambda1._#lambda4") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent._#lambda1._#lambda4") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'M')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent._#lambda1._#lambda4._#lambda8") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [27,28]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent._#lambda1._#lambda4._#lambda8") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent._#lambda1._#lambda4._#lambda8._#lambda12") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") []],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent._#lambda1._#lambda4._#lambda8._#lambda12") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Ident","ModuleIdent") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Ident","_impl#readList#Prelude.Read#Curry.Ident.ModuleIdent") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","ModuleIdent") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.ModuleIdent") []])),Func ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Ident","Ident") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Ident","_impl#show#Prelude.Show#Curry.Ident.Ident") [],Comb (FuncPartCall 2) ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Ident","_impl#showList#Prelude.Show#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#show#Prelude.Show#Curry.Ident.Ident") 0 Public (FuncType (TCons ("Curry.Ident","Ident") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","Ident") [3,4,5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [],Lit (Intc 11)],Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int") [],Lit (Intc 11)],Var 5]]]]]]])])),Func ("Curry.Ident","_impl#showList#Prelude.Show#Curry.Ident.Ident") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") []])),Func ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Ident","Ident") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Ident","_impl#readList#Prelude.Read#Curry.Ident.Ident") []])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident._#lambda14") []],Var 2])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident._#lambda14") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident._#lambda14._#lambda17") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident._#lambda14._#lambda17") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident._#lambda14._#lambda17._#lambda21") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [15,16]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident._#lambda14._#lambda17._#lambda21") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident._#lambda14._#lambda17._#lambda21._#lambda25") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident._#lambda14._#lambda17._#lambda21._#lambda25") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident._#lambda14._#lambda17._#lambda21._#lambda25._#lambda29") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") [Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident._#lambda14._#lambda17._#lambda21._#lambda25._#lambda29") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Ident","Ident") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Ident","_impl#readList#Prelude.Read#Curry.Ident.Ident") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") []])),Func ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.QualIdent") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Ident","QualIdent") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Ident","_impl#show#Prelude.Show#Curry.Ident.QualIdent") [],Comb (FuncPartCall 2) ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [],Comb FuncCall ("Curry.Ident","_impl#showList#Prelude.Show#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#show#Prelude.Show#Curry.Ident.QualIdent") 0 Public (FuncType (TCons ("Curry.Ident","QualIdent") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Ident","QualIdent") [3,4,5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'Q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.ModuleIdent") [],Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 5]]]]]]])])),Func ("Curry.Ident","_impl#showList#Prelude.Show#Curry.Ident.QualIdent") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","QualIdent") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.QualIdent") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Ident","QualIdent") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [],Comb FuncCall ("Curry.Ident","_impl#readList#Prelude.Read#Curry.Ident.QualIdent") []])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent._#lambda31") []],Var 2])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent._#lambda31") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent._#lambda31._#lambda34") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent._#lambda31._#lambda34") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'Q')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent._#lambda31._#lambda34._#lambda38") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent._#lambda31._#lambda34._#lambda38") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent._#lambda31._#lambda34._#lambda38._#lambda42") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.ModuleIdent") [],Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent._#lambda31._#lambda34._#lambda38._#lambda42") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Curry.Ident","ModuleIdent") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent._#lambda31._#lambda34._#lambda38._#lambda42._#lambda46") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent._#lambda31._#lambda34._#lambda38._#lambda42._#lambda46") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Curry.Ident","ModuleIdent") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Ident","QualIdent") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Ident","_impl#readList#Prelude.Read#Curry.Ident.QualIdent") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","QualIdent") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.QualIdent") []]))] []