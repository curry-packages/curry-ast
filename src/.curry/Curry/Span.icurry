interface Curry.Span where {
import Curry.Position;
import Prelude;
data Span
  = Span Curry.Position.Position Curry.Position.Position
  | NoSpan;
end 1 :: Span -> Curry.Position.Position;
fromPosition 1 :: Curry.Position.Position -> Span;
isAfter 2 :: Span -> Span -> Prelude.Bool;
isBefore 2 :: Span -> Span -> Prelude.Bool;
isBeforeList 2 :: Span -> [Span] -> Prelude.Bool;
isNoSpan 1 :: Span -> Prelude.Bool;
isSpan 1 :: Span -> Prelude.Bool;
start 1 :: Span -> Curry.Position.Position;
stripStart 0 :: Span -> Span;
vertDist 2 :: Span -> Span -> Prelude.Int;
hiding data Curry.Position.Position;
instance Prelude.Eq Span {
  (==) 2
};
instance Prelude.Read Span {
  readsPrec 2
};
instance Prelude.Show Span {
  showsPrec 2
};
hiding data Prelude.Bool;
hiding data Prelude.Int;
instance Prelude.Eq Curry.Position.Position {
  (==) 2
} {-# MODULE Curry.Position #-};
instance Prelude.Ord Curry.Position.Position {
  (<=) 2
} {-# MODULE Curry.Position #-};
instance Prelude.Read Curry.Position.Position {
  readsPrec 2
} {-# MODULE Curry.Position #-};
instance Prelude.Show Curry.Position.Position {
  showsPrec 2
} {-# MODULE Curry.Position #-};
hiding class Prelude.Eq a;
hiding class Prelude.Read a;
hiding class Prelude.Show a;
hiding class Prelude.Eq a => Prelude.Ord a;
instance Prelude.Eq () {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b) => Prelude.Eq (a, b) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b,
          Prelude.Eq c) => Prelude.Eq (a, b, c) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c,
          Prelude.Eq d) => Prelude.Eq (a, b, c, d) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e) => Prelude.Eq (a, b, c, d, e) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e, Prelude.Eq f) => Prelude.Eq (a, b, c, d, e, f) {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a, Prelude.Eq b, Prelude.Eq c, Prelude.Eq d,
          Prelude.Eq e, Prelude.Eq f, Prelude.Eq g) => Prelude.Eq (a, b, c,
                                                                   d, e, f, g) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq [a] {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Bool {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Char {
  (==) 2
} {-# MODULE Prelude #-};
instance (Prelude.Eq a,
          Prelude.Eq b) => Prelude.Eq (Prelude.Either a b) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Float {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.IOError {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Int {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq a => Prelude.Eq (Prelude.Maybe a) {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Eq Prelude.Ordering {
  (==) 2
} {-# MODULE Prelude #-};
instance Prelude.Read () {
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a, Prelude.Read b) => Prelude.Read (a, b) {
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a, Prelude.Read b,
          Prelude.Read c) => Prelude.Read (a, b, c) {
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a, Prelude.Read b, Prelude.Read c,
          Prelude.Read d) => Prelude.Read (a, b, c, d) {
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a, Prelude.Read b, Prelude.Read c,
          Prelude.Read d, Prelude.Read e) => Prelude.Read (a, b, c, d, e) {
  readsPrec 1
} {-# MODULE Prelude #-};
instance Prelude.Read a => Prelude.Read [a] {
  readsPrec 1
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.Bool {
  readsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.Char {
  readList 1;
  readsPrec 1
} {-# MODULE Prelude #-};
instance (Prelude.Read a,
          Prelude.Read b) => Prelude.Read (Prelude.Either a b) {
  readsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.Float {
  readsPrec 1
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.IOError {
  readsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.Int {
  readsPrec 1
} {-# MODULE Prelude #-};
instance Prelude.Read a => Prelude.Read (Prelude.Maybe a) {
  readsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Read Prelude.Ordering {
  readsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show () {
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b) => Prelude.Show (a, b) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b,
          Prelude.Show c) => Prelude.Show (a, b, c) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b, Prelude.Show c,
          Prelude.Show d) => Prelude.Show (a, b, c, d) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a, Prelude.Show b, Prelude.Show c,
          Prelude.Show d, Prelude.Show e) => Prelude.Show (a, b, c, d, e) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show a => Prelude.Show [a] {
  showsPrec 1
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Bool {
  showsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Char {
  showList 1;
  showsPrec 2
} {-# MODULE Prelude #-};
instance (Prelude.Show a,
          Prelude.Show b) => Prelude.Show (Prelude.Either a b) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Float {
  showsPrec 0
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.IOError {
  showsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Int {
  showsPrec 0
} {-# MODULE Prelude #-};
instance Prelude.Show a => Prelude.Show (Prelude.Maybe a) {
  showsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Show Prelude.Ordering {
  showsPrec 2
} {-# MODULE Prelude #-};
instance Prelude.Ord () {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b) => Prelude.Ord (a, b) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b,
          Prelude.Ord c) => Prelude.Ord (a, b, c) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
          Prelude.Ord d) => Prelude.Ord (a, b, c, d) {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a, Prelude.Ord b, Prelude.Ord c,
          Prelude.Ord d, Prelude.Ord e) => Prelude.Ord (a, b, c, d, e) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord a => Prelude.Ord [a] {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Bool {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Char {
  (<=) 2
} {-# MODULE Prelude #-};
instance (Prelude.Ord a,
          Prelude.Ord b) => Prelude.Ord (Prelude.Either a b) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Float {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Int {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord a => Prelude.Ord (Prelude.Maybe a) {
  (<=) 2
} {-# MODULE Prelude #-};
instance Prelude.Ord Prelude.Ordering {
  (<=) 2
} {-# MODULE Prelude #-};
hiding data Prelude.Char;
hiding data Prelude.Either a b;
hiding data Prelude.Float;
hiding data Prelude.IOError;
hiding data Prelude.Maybe a;
hiding data Prelude.Ordering
}