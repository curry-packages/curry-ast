Prog "Curry.Types" ["Curry.Ident","Curry.Position","Curry.SpanInfo","Prelude"] [TypeSyn ("Curry.Types","Qualified") Public [] (TCons ("Prelude","Bool") []),TypeSyn ("Curry.Types","Precedence") Public [] (TCons ("Prelude","Int") []),TypeSyn ("Curry.Types","Context") Public [] (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]),TypeSyn ("Curry.Types","InstanceType") Public [] (TCons ("Curry.Types","TypeExpr") []),Type ("Curry.Types","Module") Public [0] [Cons ("Curry.Types","Module") 6 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []],TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","Maybe") [TCons ("Curry.Types","ExportSpec") []],TCons ("Prelude","[]") [TCons ("Curry.Types","ImportDecl") []],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]]],Type ("Curry.Types","ModulePragma") Public [] [Cons ("Curry.Types","LanguagePragma") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Extension") []]],Cons ("Curry.Types","OptionsPragma") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","Maybe") [TCons ("Curry.Types","Tool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Curry.Types","ExportSpec") Public [] [Cons ("Curry.Types","Exporting") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Export") []]]],Type ("Curry.Types","Export") Public [] [Cons ("Curry.Types","Export") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","ExportTypeWith") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]],Cons ("Curry.Types","ExportTypeAll") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","ExportModule") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","ModuleIdent") []]],Type ("Curry.Types","ImportDecl") Public [] [Cons ("Curry.Types","ImportDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","Bool") [],TCons ("Prelude","Maybe") [TCons ("Curry.Ident","ModuleIdent") []],TCons ("Prelude","Maybe") [TCons ("Curry.Types","ImportSpec") []]]],Type ("Curry.Types","ImportSpec") Public [] [Cons ("Curry.Types","Importing") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []]],Cons ("Curry.Types","Hiding") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []]]],Type ("Curry.Types","Import") Public [] [Cons ("Curry.Types","Import") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") []],Cons ("Curry.Types","ImportTypeWith") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]],Cons ("Curry.Types","ImportTypeAll") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") []]],Type ("Curry.Types","Decl") Public [0] [Cons ("Curry.Types","InfixDecl") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Infix") [],TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]],Cons ("Curry.Types","DataDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Curry.Types","ConstrDecl") []],TCons ("Prelude","[]") [TCons ("Curry.Ident","QualIdent") []]],Cons ("Curry.Types","ExternalDataDecl") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]],Cons ("Curry.Types","NewtypeDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","QualIdent") []]],Cons ("Curry.Types","TypeDecl") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","TypeSig") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Curry.Types","QualTypeExpr") []],Cons ("Curry.Types","FunctionDecl") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Equation") [TVar 0]]],Cons ("Curry.Types","ExternalDecl") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]]],Cons ("Curry.Types","PatternDecl") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Types","Rhs") [TVar 0]],Cons ("Curry.Types","FreeDecl") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]]],Cons ("Curry.Types","DefaultDecl") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []]],Cons ("Curry.Types","ClassDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Ident","Ident") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]],Cons ("Curry.Types","InstanceDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Ident","QualIdent") [],TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]]],Type ("Curry.Types","Infix") Public [] [Cons ("Curry.Types","InfixL") 0 Public [],Cons ("Curry.Types","InfixR") 0 Public [],Cons ("Curry.Types","Infix") 0 Public []],Type ("Curry.Types","ConstrDecl") Public [] [Cons ("Curry.Types","ConstrDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []]],Cons ("Curry.Types","ConOpDecl") 6 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Types","TypeExpr") [],TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","RecordDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Types","FieldDecl") []]]],Type ("Curry.Types","NewConstrDecl") Public [] [Cons ("Curry.Types","NewConstrDecl") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","NewRecordDecl") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","TypeExpr") []]]],Type ("Curry.Types","FieldDecl") Public [] [Cons ("Curry.Types","FieldDecl") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Curry.Types","TypeExpr") []]],Type ("Curry.Types","TypeExpr") Public [] [Cons ("Curry.Types","ConstructorType") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","ApplyType") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","TypeExpr") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","VariableType") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") []],Cons ("Curry.Types","TupleType") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []]],Cons ("Curry.Types","ListType") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","ArrowType") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","TypeExpr") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","ParenType") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","ForallType") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Curry.Types","TypeExpr") []]],Type ("Curry.Types","QualTypeExpr") Public [] [Cons ("Curry.Types","QualTypeExpr") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Types","TypeExpr") []]],Type ("Curry.Types","Constraint") Public [] [Cons ("Curry.Types","Constraint") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") [],TCons ("Curry.Types","TypeExpr") []]],Type ("Curry.Types","Equation") Public [0] [Cons ("Curry.Types","Equation") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Curry.Types","Rhs") [TVar 0]]],Type ("Curry.Types","Lhs") Public [0] [Cons ("Curry.Types","FunLhs") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]],Cons ("Curry.Types","OpLhs") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","Pattern") [TVar 0]],Cons ("Curry.Types","ApLhs") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]]],Type ("Curry.Types","Rhs") Public [0] [Cons ("Curry.Types","SimpleRhs") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]],Cons ("Curry.Types","GuardedRhs") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","CondExpr") [TVar 0]],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]]],Type ("Curry.Types","CondExpr") Public [0] [Cons ("Curry.Types","CondExpr") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]]],Type ("Curry.Types","Literal") Public [] [Cons ("Curry.Types","Char") 1 Public [TCons ("Prelude","Char") []],Cons ("Curry.Types","Int") 1 Public [TCons ("Prelude","Int") []],Cons ("Curry.Types","Float") 1 Public [TCons ("Prelude","Float") []],Cons ("Curry.Types","String") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Curry.Types","Pattern") Public [0] [Cons ("Curry.Types","LiteralPattern") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Types","Literal") []],Cons ("Curry.Types","NegativePattern") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Types","Literal") []],Cons ("Curry.Types","VariablePattern") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","Ident") []],Cons ("Curry.Types","ConstructorPattern") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]],Cons ("Curry.Types","InfixPattern") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Ident","QualIdent") [],TCons ("Curry.Types","Pattern") [TVar 0]],Cons ("Curry.Types","ParenPattern") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0]],Cons ("Curry.Types","RecordPattern") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Pattern") [TVar 0]]]],Cons ("Curry.Types","TuplePattern") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]],Cons ("Curry.Types","ListPattern") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]],Cons ("Curry.Types","AsPattern") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","Pattern") [TVar 0]],Cons ("Curry.Types","LazyPattern") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0]],Cons ("Curry.Types","FunctionPattern") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]],Cons ("Curry.Types","InfixFuncPattern") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Ident","QualIdent") [],TCons ("Curry.Types","Pattern") [TVar 0]]],Type ("Curry.Types","Expression") Public [0] [Cons ("Curry.Types","Literal") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Types","Literal") []],Cons ("Curry.Types","Variable") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","Constructor") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","Paren") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Typed") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","QualTypeExpr") []],Cons ("Curry.Types","Record") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Expression") [TVar 0]]]],Cons ("Curry.Types","RecordUpdate") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Expression") [TVar 0]]]],Cons ("Curry.Types","Tuple") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]]],Cons ("Curry.Types","List") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]]],Cons ("Curry.Types","ListCompr") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]]],Cons ("Curry.Types","EnumFrom") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","EnumFromThen") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","EnumFromTo") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","EnumFromThenTo") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","UnaryMinus") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Apply") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","InfixApply") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","LeftSection") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","InfixOp") [TVar 0]],Cons ("Curry.Types","RightSection") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Lambda") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Let") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Do") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","IfThenElse") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Case") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","CaseType") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Curry.Types","Alt") [TVar 0]]]],Type ("Curry.Types","InfixOp") Public [0] [Cons ("Curry.Types","InfixOp") 2 Public [TVar 0,TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","InfixConstr") 2 Public [TVar 0,TCons ("Curry.Ident","QualIdent") []]],Type ("Curry.Types","Statement") Public [0] [Cons ("Curry.Types","StmtExpr") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","StmtDecl") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]],Cons ("Curry.Types","StmtBind") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]]],Type ("Curry.Types","CaseType") Public [] [Cons ("Curry.Types","Rigid") 0 Public [],Cons ("Curry.Types","Flex") 0 Public []],Type ("Curry.Types","Alt") Public [0] [Cons ("Curry.Types","Alt") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Types","Rhs") [TVar 0]]],Type ("Curry.Types","Field") Public [0] [Cons ("Curry.Types","Field") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") [],TVar 0]],Type ("Curry.Types","Var") Public [0] [Cons ("Curry.Types","Var") 2 Public [TVar 0,TCons ("Curry.Ident","Ident") []]],Type ("Curry.Types","Extension") Public [] [Cons ("Curry.Types","KnownExtension") 2 Public [TCons ("Curry.Position","Position") [],TCons ("Curry.Types","KnownExtension") []],Cons ("Curry.Types","UnknownExtension") 2 Public [TCons ("Curry.Position","Position") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Curry.Types","KnownExtension") Public [] [Cons ("Curry.Types","AnonFreeVars") 0 Public [],Cons ("Curry.Types","CPP") 0 Public [],Cons ("Curry.Types","ExistentialQuantification") 0 Public [],Cons ("Curry.Types","FunctionalPatterns") 0 Public [],Cons ("Curry.Types","NegativeLiterals") 0 Public [],Cons ("Curry.Types","NoImplicitPrelude") 0 Public []],Type ("Curry.Types","Tool") Public [] [Cons ("Curry.Types","KICS2") 0 Public [],Cons ("Curry.Types","PAKCS") 0 Public [],Cons ("Curry.Types","CYMAKE") 0 Public [],Cons ("Curry.Types","FRONTEND") 0 Public [],Cons ("Curry.Types","UnknownTool") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Module") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Module") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Module") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Module") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Module") 1 Public (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Module") [2,3,4,5,6,7]) (Var 2)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Module") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (TCons ("Curry.Types","Module") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Module") [3,4,5,6,7,8]) (Comb ConsCall ("Curry.Types","Module") [Var 1,Var 4,Var 5,Var 6,Var 7,Var 8])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Decl") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Decl") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Decl") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Decl") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Decl") 1 Public (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","InfixDecl") [2,3,4,5]) (Var 2),Branch (Pattern ("Curry.Types","DataDecl") [6,7,8,9,10]) (Var 6),Branch (Pattern ("Curry.Types","ExternalDataDecl") [11,12,13]) (Var 11),Branch (Pattern ("Curry.Types","NewtypeDecl") [14,15,16,17,18]) (Var 14),Branch (Pattern ("Curry.Types","TypeDecl") [19,20,21,22]) (Var 19),Branch (Pattern ("Curry.Types","TypeSig") [23,24,25]) (Var 23),Branch (Pattern ("Curry.Types","FunctionDecl") [26,27,28,29]) (Var 26),Branch (Pattern ("Curry.Types","ExternalDecl") [30,31]) (Var 30),Branch (Pattern ("Curry.Types","PatternDecl") [32,33,34]) (Var 32),Branch (Pattern ("Curry.Types","FreeDecl") [35,36]) (Var 35),Branch (Pattern ("Curry.Types","DefaultDecl") [37,38]) (Var 37),Branch (Pattern ("Curry.Types","ClassDecl") [39,40,41,42,43]) (Var 39),Branch (Pattern ("Curry.Types","InstanceDecl") [44,45,46,47,48]) (Var 44)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Decl") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (TCons ("Curry.Types","Decl") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","InfixDecl") [3,4,5,6]) (Comb ConsCall ("Curry.Types","InfixDecl") [Var 1,Var 4,Var 5,Var 6]),Branch (Pattern ("Curry.Types","DataDecl") [7,8,9,10,11]) (Comb ConsCall ("Curry.Types","DataDecl") [Var 1,Var 8,Var 9,Var 10,Var 11]),Branch (Pattern ("Curry.Types","ExternalDataDecl") [12,13,14]) (Comb ConsCall ("Curry.Types","ExternalDataDecl") [Var 1,Var 13,Var 14]),Branch (Pattern ("Curry.Types","NewtypeDecl") [15,16,17,18,19]) (Comb ConsCall ("Curry.Types","NewtypeDecl") [Var 1,Var 16,Var 17,Var 18,Var 19]),Branch (Pattern ("Curry.Types","TypeDecl") [20,21,22,23]) (Comb ConsCall ("Curry.Types","TypeDecl") [Var 1,Var 21,Var 22,Var 23]),Branch (Pattern ("Curry.Types","TypeSig") [24,25,26]) (Comb ConsCall ("Curry.Types","TypeSig") [Var 1,Var 25,Var 26]),Branch (Pattern ("Curry.Types","FunctionDecl") [27,28,29,30]) (Comb ConsCall ("Curry.Types","FunctionDecl") [Var 1,Var 28,Var 29,Var 30]),Branch (Pattern ("Curry.Types","ExternalDecl") [31,32]) (Comb ConsCall ("Curry.Types","ExternalDecl") [Var 1,Var 32]),Branch (Pattern ("Curry.Types","PatternDecl") [33,34,35]) (Comb ConsCall ("Curry.Types","PatternDecl") [Var 1,Var 34,Var 35]),Branch (Pattern ("Curry.Types","FreeDecl") [36,37]) (Comb ConsCall ("Curry.Types","FreeDecl") [Var 1,Var 37]),Branch (Pattern ("Curry.Types","DefaultDecl") [38,39]) (Comb ConsCall ("Curry.Types","DefaultDecl") [Var 1,Var 39]),Branch (Pattern ("Curry.Types","ClassDecl") [40,41,42,43,44]) (Comb ConsCall ("Curry.Types","ClassDecl") [Var 1,Var 41,Var 42,Var 43,Var 44]),Branch (Pattern ("Curry.Types","InstanceDecl") [45,46,47,48,49]) (Comb ConsCall ("Curry.Types","InstanceDecl") [Var 1,Var 46,Var 47,Var 48,Var 49])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Equation") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Equation") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Equation") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Equation") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Equation") 1 Public (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Equation") [2,3,4]) (Var 2)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Equation") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (TCons ("Curry.Types","Equation") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Equation") [3,4,5]) (Comb ConsCall ("Curry.Types","Equation") [Var 1,Var 4,Var 5])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.ModulePragma") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","ModulePragma") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ModulePragma") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ModulePragma") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ModulePragma") 1 Public (FuncType (TCons ("Curry.Types","ModulePragma") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","LanguagePragma") [2,3]) (Var 2),Branch (Pattern ("Curry.Types","OptionsPragma") [4,5,6]) (Var 4)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ModulePragma") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","ModulePragma") []) (TCons ("Curry.Types","ModulePragma") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","LanguagePragma") [3,4]) (Comb ConsCall ("Curry.Types","LanguagePragma") [Var 1,Var 4]),Branch (Pattern ("Curry.Types","OptionsPragma") [5,6,7]) (Comb ConsCall ("Curry.Types","OptionsPragma") [Var 1,Var 6,Var 7])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.ExportSpec") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","ExportSpec") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ExportSpec") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ExportSpec") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ExportSpec") 1 Public (FuncType (TCons ("Curry.Types","ExportSpec") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Exporting") [2,3]) (Var 2)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ExportSpec") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","ExportSpec") []) (TCons ("Curry.Types","ExportSpec") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Exporting") [3,4]) (Comb ConsCall ("Curry.Types","Exporting") [Var 1,Var 4])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Export") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Export") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Export") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Export") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Export") 1 Public (FuncType (TCons ("Curry.Types","Export") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Export") [2,3]) (Var 2),Branch (Pattern ("Curry.Types","ExportTypeWith") [4,5,6]) (Var 4),Branch (Pattern ("Curry.Types","ExportTypeAll") [7,8]) (Var 7),Branch (Pattern ("Curry.Types","ExportModule") [9,10]) (Var 9)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Export") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Export") []) (TCons ("Curry.Types","Export") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Export") [3,4]) (Comb ConsCall ("Curry.Types","Export") [Var 1,Var 4]),Branch (Pattern ("Curry.Types","ExportTypeWith") [5,6,7]) (Comb ConsCall ("Curry.Types","ExportTypeWith") [Var 1,Var 6,Var 7]),Branch (Pattern ("Curry.Types","ExportTypeAll") [8,9]) (Comb ConsCall ("Curry.Types","ExportTypeAll") [Var 1,Var 9]),Branch (Pattern ("Curry.Types","ExportModule") [10,11]) (Comb ConsCall ("Curry.Types","ExportModule") [Var 1,Var 11])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportDecl") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","ImportDecl") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportDecl") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportDecl") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportDecl") 1 Public (FuncType (TCons ("Curry.Types","ImportDecl") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","ImportDecl") [2,3,4,5,6]) (Var 2)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportDecl") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","ImportDecl") []) (TCons ("Curry.Types","ImportDecl") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ImportDecl") [3,4,5,6,7]) (Comb ConsCall ("Curry.Types","ImportDecl") [Var 1,Var 4,Var 5,Var 6,Var 7])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportSpec") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","ImportSpec") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportSpec") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportSpec") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportSpec") 1 Public (FuncType (TCons ("Curry.Types","ImportSpec") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Importing") [2,3]) (Var 2),Branch (Pattern ("Curry.Types","Hiding") [4,5]) (Var 4)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportSpec") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","ImportSpec") []) (TCons ("Curry.Types","ImportSpec") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Importing") [3,4]) (Comb ConsCall ("Curry.Types","Importing") [Var 1,Var 4]),Branch (Pattern ("Curry.Types","Hiding") [5,6]) (Comb ConsCall ("Curry.Types","Hiding") [Var 1,Var 6])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Import") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Import") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Import") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Import") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Import") 1 Public (FuncType (TCons ("Curry.Types","Import") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Import") [2,3]) (Var 2),Branch (Pattern ("Curry.Types","ImportTypeWith") [4,5,6]) (Var 4),Branch (Pattern ("Curry.Types","ImportTypeAll") [7,8]) (Var 7)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Import") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Import") []) (TCons ("Curry.Types","Import") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Import") [3,4]) (Comb ConsCall ("Curry.Types","Import") [Var 1,Var 4]),Branch (Pattern ("Curry.Types","ImportTypeWith") [5,6,7]) (Comb ConsCall ("Curry.Types","ImportTypeWith") [Var 1,Var 6,Var 7]),Branch (Pattern ("Curry.Types","ImportTypeAll") [8,9]) (Comb ConsCall ("Curry.Types","ImportTypeAll") [Var 1,Var 9])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.ConstrDecl") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","ConstrDecl") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ConstrDecl") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ConstrDecl") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ConstrDecl") 1 Public (FuncType (TCons ("Curry.Types","ConstrDecl") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","ConstrDecl") [2,3,4,5,6]) (Var 2),Branch (Pattern ("Curry.Types","ConOpDecl") [7,8,9,10,11,12]) (Var 7),Branch (Pattern ("Curry.Types","RecordDecl") [13,14,15,16,17]) (Var 13)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ConstrDecl") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","ConstrDecl") []) (TCons ("Curry.Types","ConstrDecl") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstrDecl") [3,4,5,6,7]) (Comb ConsCall ("Curry.Types","ConstrDecl") [Var 1,Var 4,Var 5,Var 6,Var 7]),Branch (Pattern ("Curry.Types","ConOpDecl") [8,9,10,11,12,13]) (Comb ConsCall ("Curry.Types","ConOpDecl") [Var 1,Var 9,Var 10,Var 11,Var 12,Var 13]),Branch (Pattern ("Curry.Types","RecordDecl") [14,15,16,17,18]) (Comb ConsCall ("Curry.Types","RecordDecl") [Var 1,Var 15,Var 16,Var 17,Var 18])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.NewConstrDecl") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","NewConstrDecl") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.NewConstrDecl") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.NewConstrDecl") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.NewConstrDecl") 1 Public (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","NewConstrDecl") [2,3,4]) (Var 2),Branch (Pattern ("Curry.Types","NewRecordDecl") [5,6,7]) (Var 5)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.NewConstrDecl") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (TCons ("Curry.Types","NewConstrDecl") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","NewConstrDecl") [3,4,5]) (Comb ConsCall ("Curry.Types","NewConstrDecl") [Var 1,Var 4,Var 5]),Branch (Pattern ("Curry.Types","NewRecordDecl") [6,7,8]) (Comb ConsCall ("Curry.Types","NewRecordDecl") [Var 1,Var 7,Var 8])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.FieldDecl") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","FieldDecl") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.FieldDecl") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.FieldDecl") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.FieldDecl") 1 Public (FuncType (TCons ("Curry.Types","FieldDecl") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","FieldDecl") [2,3,4]) (Var 2)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.FieldDecl") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","FieldDecl") []) (TCons ("Curry.Types","FieldDecl") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","FieldDecl") [3,4,5]) (Comb ConsCall ("Curry.Types","FieldDecl") [Var 1,Var 4,Var 5])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.TypeExpr") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","TypeExpr") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.TypeExpr") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.TypeExpr") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.TypeExpr") 1 Public (FuncType (TCons ("Curry.Types","TypeExpr") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","ConstructorType") [2,3]) (Var 2),Branch (Pattern ("Curry.Types","ApplyType") [4,5,6]) (Var 4),Branch (Pattern ("Curry.Types","VariableType") [7,8]) (Var 7),Branch (Pattern ("Curry.Types","TupleType") [9,10]) (Var 9),Branch (Pattern ("Curry.Types","ListType") [11,12]) (Var 11),Branch (Pattern ("Curry.Types","ArrowType") [13,14,15]) (Var 13),Branch (Pattern ("Curry.Types","ParenType") [16,17]) (Var 16),Branch (Pattern ("Curry.Types","ForallType") [18,19,20]) (Var 18)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.TypeExpr") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (TCons ("Curry.Types","TypeExpr") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstructorType") [3,4]) (Comb ConsCall ("Curry.Types","ConstructorType") [Var 1,Var 4]),Branch (Pattern ("Curry.Types","ApplyType") [5,6,7]) (Comb ConsCall ("Curry.Types","ApplyType") [Var 1,Var 6,Var 7]),Branch (Pattern ("Curry.Types","VariableType") [8,9]) (Comb ConsCall ("Curry.Types","VariableType") [Var 1,Var 9]),Branch (Pattern ("Curry.Types","TupleType") [10,11]) (Comb ConsCall ("Curry.Types","TupleType") [Var 1,Var 11]),Branch (Pattern ("Curry.Types","ListType") [12,13]) (Comb ConsCall ("Curry.Types","ListType") [Var 1,Var 13]),Branch (Pattern ("Curry.Types","ArrowType") [14,15,16]) (Comb ConsCall ("Curry.Types","ArrowType") [Var 1,Var 15,Var 16]),Branch (Pattern ("Curry.Types","ParenType") [17,18]) (Comb ConsCall ("Curry.Types","ParenType") [Var 1,Var 18]),Branch (Pattern ("Curry.Types","ForallType") [19,20,21]) (Comb ConsCall ("Curry.Types","ForallType") [Var 1,Var 20,Var 21])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.QualTypeExpr") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","QualTypeExpr") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.QualTypeExpr") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.QualTypeExpr") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.QualTypeExpr") 1 Public (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","QualTypeExpr") [2,3,4]) (Var 2)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.QualTypeExpr") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (TCons ("Curry.Types","QualTypeExpr") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","QualTypeExpr") [3,4,5]) (Comb ConsCall ("Curry.Types","QualTypeExpr") [Var 1,Var 4,Var 5])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Constraint") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Constraint") []]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Constraint") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Constraint") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Constraint") 1 Public (FuncType (TCons ("Curry.Types","Constraint") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Constraint") [2,3,4]) (Var 2)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Constraint") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Constraint") []) (TCons ("Curry.Types","Constraint") []))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Constraint") [3,4,5]) (Comb ConsCall ("Curry.Types","Constraint") [Var 1,Var 4,Var 5])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Lhs") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Lhs") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Lhs") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Lhs") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","FunLhs") [2,3,4]) (Var 2),Branch (Pattern ("Curry.Types","OpLhs") [5,6,7,8]) (Var 5),Branch (Pattern ("Curry.Types","ApLhs") [9,10,11]) (Var 9)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Lhs") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (TCons ("Curry.Types","Lhs") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","FunLhs") [3,4,5]) (Comb ConsCall ("Curry.Types","FunLhs") [Var 1,Var 4,Var 5]),Branch (Pattern ("Curry.Types","OpLhs") [6,7,8,9]) (Comb ConsCall ("Curry.Types","OpLhs") [Var 1,Var 7,Var 8,Var 9]),Branch (Pattern ("Curry.Types","ApLhs") [10,11,12]) (Comb ConsCall ("Curry.Types","ApLhs") [Var 1,Var 11,Var 12])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Rhs") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Rhs") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Rhs") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Rhs") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","SimpleRhs") [2,3,4]) (Var 2),Branch (Pattern ("Curry.Types","GuardedRhs") [5,6,7]) (Var 5)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Rhs") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (TCons ("Curry.Types","Rhs") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","SimpleRhs") [3,4,5]) (Comb ConsCall ("Curry.Types","SimpleRhs") [Var 1,Var 4,Var 5]),Branch (Pattern ("Curry.Types","GuardedRhs") [6,7,8]) (Comb ConsCall ("Curry.Types","GuardedRhs") [Var 1,Var 7,Var 8])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.CondExpr") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","CondExpr") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.CondExpr") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.CondExpr") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","CondExpr") [2,3,4]) (Var 2)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.CondExpr") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (TCons ("Curry.Types","CondExpr") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","CondExpr") [3,4,5]) (Comb ConsCall ("Curry.Types","CondExpr") [Var 1,Var 4,Var 5])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Pattern") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Pattern") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Pattern") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Pattern") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","LiteralPattern") [2,3,4]) (Var 2),Branch (Pattern ("Curry.Types","NegativePattern") [5,6,7]) (Var 5),Branch (Pattern ("Curry.Types","VariablePattern") [8,9,10]) (Var 8),Branch (Pattern ("Curry.Types","ConstructorPattern") [11,12,13,14]) (Var 11),Branch (Pattern ("Curry.Types","InfixPattern") [15,16,17,18,19]) (Var 15),Branch (Pattern ("Curry.Types","ParenPattern") [20,21]) (Var 20),Branch (Pattern ("Curry.Types","RecordPattern") [22,23,24,25]) (Var 22),Branch (Pattern ("Curry.Types","TuplePattern") [26,27]) (Var 26),Branch (Pattern ("Curry.Types","ListPattern") [28,29,30]) (Var 28),Branch (Pattern ("Curry.Types","AsPattern") [31,32,33]) (Var 31),Branch (Pattern ("Curry.Types","LazyPattern") [34,35]) (Var 34),Branch (Pattern ("Curry.Types","FunctionPattern") [36,37,38,39]) (Var 36),Branch (Pattern ("Curry.Types","InfixFuncPattern") [40,41,42,43,44]) (Var 40)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Pattern") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (TCons ("Curry.Types","Pattern") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","LiteralPattern") [3,4,5]) (Comb ConsCall ("Curry.Types","LiteralPattern") [Var 1,Var 4,Var 5]),Branch (Pattern ("Curry.Types","NegativePattern") [6,7,8]) (Comb ConsCall ("Curry.Types","NegativePattern") [Var 1,Var 7,Var 8]),Branch (Pattern ("Curry.Types","VariablePattern") [9,10,11]) (Comb ConsCall ("Curry.Types","VariablePattern") [Var 1,Var 10,Var 11]),Branch (Pattern ("Curry.Types","ConstructorPattern") [12,13,14,15]) (Comb ConsCall ("Curry.Types","ConstructorPattern") [Var 1,Var 13,Var 14,Var 15]),Branch (Pattern ("Curry.Types","InfixPattern") [16,17,18,19,20]) (Comb ConsCall ("Curry.Types","InfixPattern") [Var 1,Var 17,Var 18,Var 19,Var 20]),Branch (Pattern ("Curry.Types","ParenPattern") [21,22]) (Comb ConsCall ("Curry.Types","ParenPattern") [Var 1,Var 22]),Branch (Pattern ("Curry.Types","RecordPattern") [23,24,25,26]) (Comb ConsCall ("Curry.Types","RecordPattern") [Var 1,Var 24,Var 25,Var 26]),Branch (Pattern ("Curry.Types","TuplePattern") [27,28]) (Comb ConsCall ("Curry.Types","TuplePattern") [Var 1,Var 28]),Branch (Pattern ("Curry.Types","ListPattern") [29,30,31]) (Comb ConsCall ("Curry.Types","ListPattern") [Var 1,Var 30,Var 31]),Branch (Pattern ("Curry.Types","AsPattern") [32,33,34]) (Comb ConsCall ("Curry.Types","AsPattern") [Var 1,Var 33,Var 34]),Branch (Pattern ("Curry.Types","LazyPattern") [35,36]) (Comb ConsCall ("Curry.Types","LazyPattern") [Var 1,Var 36]),Branch (Pattern ("Curry.Types","FunctionPattern") [37,38,39,40]) (Comb ConsCall ("Curry.Types","FunctionPattern") [Var 1,Var 38,Var 39,Var 40]),Branch (Pattern ("Curry.Types","InfixFuncPattern") [41,42,43,44,45]) (Comb ConsCall ("Curry.Types","InfixFuncPattern") [Var 1,Var 42,Var 43,Var 44,Var 45])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Expression") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Expression") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Expression") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Expression") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Expression") 1 Public (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Literal") [2,3,4]) (Var 2),Branch (Pattern ("Curry.Types","Variable") [5,6,7]) (Var 5),Branch (Pattern ("Curry.Types","Constructor") [8,9,10]) (Var 8),Branch (Pattern ("Curry.Types","Paren") [11,12]) (Var 11),Branch (Pattern ("Curry.Types","Typed") [13,14,15]) (Var 13),Branch (Pattern ("Curry.Types","Record") [16,17,18,19]) (Var 16),Branch (Pattern ("Curry.Types","RecordUpdate") [20,21,22]) (Var 20),Branch (Pattern ("Curry.Types","Tuple") [23,24]) (Var 23),Branch (Pattern ("Curry.Types","List") [25,26,27]) (Var 25),Branch (Pattern ("Curry.Types","ListCompr") [28,29,30]) (Var 28),Branch (Pattern ("Curry.Types","EnumFrom") [31,32]) (Var 31),Branch (Pattern ("Curry.Types","EnumFromThen") [33,34,35]) (Var 33),Branch (Pattern ("Curry.Types","EnumFromTo") [36,37,38]) (Var 36),Branch (Pattern ("Curry.Types","EnumFromThenTo") [39,40,41,42]) (Var 39),Branch (Pattern ("Curry.Types","UnaryMinus") [43,44]) (Var 43),Branch (Pattern ("Curry.Types","Apply") [45,46,47]) (Var 45),Branch (Pattern ("Curry.Types","InfixApply") [48,49,50,51]) (Var 48),Branch (Pattern ("Curry.Types","LeftSection") [52,53,54]) (Var 52),Branch (Pattern ("Curry.Types","RightSection") [55,56,57]) (Var 55),Branch (Pattern ("Curry.Types","Lambda") [58,59,60]) (Var 58),Branch (Pattern ("Curry.Types","Let") [61,62,63]) (Var 61),Branch (Pattern ("Curry.Types","Do") [64,65,66]) (Var 64),Branch (Pattern ("Curry.Types","IfThenElse") [67,68,69,70]) (Var 67),Branch (Pattern ("Curry.Types","Case") [71,72,73,74]) (Var 71)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Expression") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (TCons ("Curry.Types","Expression") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Literal") [3,4,5]) (Comb ConsCall ("Curry.Types","Literal") [Var 1,Var 4,Var 5]),Branch (Pattern ("Curry.Types","Variable") [6,7,8]) (Comb ConsCall ("Curry.Types","Variable") [Var 1,Var 7,Var 8]),Branch (Pattern ("Curry.Types","Constructor") [9,10,11]) (Comb ConsCall ("Curry.Types","Constructor") [Var 1,Var 10,Var 11]),Branch (Pattern ("Curry.Types","Paren") [12,13]) (Comb ConsCall ("Curry.Types","Paren") [Var 1,Var 13]),Branch (Pattern ("Curry.Types","Typed") [14,15,16]) (Comb ConsCall ("Curry.Types","Typed") [Var 1,Var 15,Var 16]),Branch (Pattern ("Curry.Types","Record") [17,18,19,20]) (Comb ConsCall ("Curry.Types","Record") [Var 1,Var 18,Var 19,Var 20]),Branch (Pattern ("Curry.Types","RecordUpdate") [21,22,23]) (Comb ConsCall ("Curry.Types","RecordUpdate") [Var 1,Var 22,Var 23]),Branch (Pattern ("Curry.Types","Tuple") [24,25]) (Comb ConsCall ("Curry.Types","Tuple") [Var 1,Var 25]),Branch (Pattern ("Curry.Types","List") [26,27,28]) (Comb ConsCall ("Curry.Types","List") [Var 1,Var 27,Var 28]),Branch (Pattern ("Curry.Types","ListCompr") [29,30,31]) (Comb ConsCall ("Curry.Types","ListCompr") [Var 1,Var 30,Var 31]),Branch (Pattern ("Curry.Types","EnumFrom") [32,33]) (Comb ConsCall ("Curry.Types","EnumFrom") [Var 1,Var 33]),Branch (Pattern ("Curry.Types","EnumFromThen") [34,35,36]) (Comb ConsCall ("Curry.Types","EnumFromThen") [Var 1,Var 35,Var 36]),Branch (Pattern ("Curry.Types","EnumFromTo") [37,38,39]) (Comb ConsCall ("Curry.Types","EnumFromTo") [Var 1,Var 38,Var 39]),Branch (Pattern ("Curry.Types","EnumFromThenTo") [40,41,42,43]) (Comb ConsCall ("Curry.Types","EnumFromThenTo") [Var 1,Var 41,Var 42,Var 43]),Branch (Pattern ("Curry.Types","UnaryMinus") [44,45]) (Comb ConsCall ("Curry.Types","UnaryMinus") [Var 1,Var 45]),Branch (Pattern ("Curry.Types","Apply") [46,47,48]) (Comb ConsCall ("Curry.Types","Apply") [Var 1,Var 47,Var 48]),Branch (Pattern ("Curry.Types","InfixApply") [49,50,51,52]) (Comb ConsCall ("Curry.Types","InfixApply") [Var 1,Var 50,Var 51,Var 52]),Branch (Pattern ("Curry.Types","LeftSection") [53,54,55]) (Comb ConsCall ("Curry.Types","LeftSection") [Var 1,Var 54,Var 55]),Branch (Pattern ("Curry.Types","RightSection") [56,57,58]) (Comb ConsCall ("Curry.Types","RightSection") [Var 1,Var 57,Var 58]),Branch (Pattern ("Curry.Types","Lambda") [59,60,61]) (Comb ConsCall ("Curry.Types","Lambda") [Var 1,Var 60,Var 61]),Branch (Pattern ("Curry.Types","Let") [62,63,64]) (Comb ConsCall ("Curry.Types","Let") [Var 1,Var 63,Var 64]),Branch (Pattern ("Curry.Types","Do") [65,66,67]) (Comb ConsCall ("Curry.Types","Do") [Var 1,Var 66,Var 67]),Branch (Pattern ("Curry.Types","IfThenElse") [68,69,70,71]) (Comb ConsCall ("Curry.Types","IfThenElse") [Var 1,Var 69,Var 70,Var 71]),Branch (Pattern ("Curry.Types","Case") [72,73,74,75]) (Comb ConsCall ("Curry.Types","Case") [Var 1,Var 73,Var 74,Var 75])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Statement") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Statement") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Statement") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Statement") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Statement") 1 Public (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","StmtExpr") [2,3]) (Var 2),Branch (Pattern ("Curry.Types","StmtDecl") [4,5]) (Var 4),Branch (Pattern ("Curry.Types","StmtBind") [6,7,8]) (Var 6)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Statement") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (TCons ("Curry.Types","Statement") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","StmtExpr") [3,4]) (Comb ConsCall ("Curry.Types","StmtExpr") [Var 1,Var 4]),Branch (Pattern ("Curry.Types","StmtDecl") [5,6]) (Comb ConsCall ("Curry.Types","StmtDecl") [Var 1,Var 6]),Branch (Pattern ("Curry.Types","StmtBind") [7,8,9]) (Comb ConsCall ("Curry.Types","StmtBind") [Var 1,Var 8,Var 9])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Alt") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Alt") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Alt") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Alt") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Alt") 1 Public (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Alt") [2,3,4]) (Var 2)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Alt") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (TCons ("Curry.Types","Alt") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Alt") [3,4,5]) (Comb ConsCall ("Curry.Types","Alt") [Var 1,Var 4,Var 5])])),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Field") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Field") [TVar 0]]) (Rule [] (Comb ConsCall ("Curry.SpanInfo","_Dict#HasSpanInfo") [Comb (FuncPartCall 1) ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Field") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Field") []])),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Field") 1 Public (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [1] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Field") [2,3,4]) (Var 2)])),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Field") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (TCons ("Curry.Types","Field") [TVar 0]))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Field") [3,4,5]) (Comb ConsCall ("Curry.Types","Field") [Var 1,Var 4,Var 5])])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Module") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Module") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Module") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Module") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Module") [4,5,6,7,8,9]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Module") [10,11,12,13,14,15]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 10],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ModulePragma") [],Var 5,Var 11]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.ModuleIdent") [Var 6,Var 12]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ExportSpec") [],Var 7,Var 13]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ImportDecl") [],Var 8,Var 14]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Decl") [Var 1],Var 9,Var 15]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Module") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Module") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Module") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1") [Var 1]],Var 3])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'M')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [18,19]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.ModulePragma") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16._#lambda20") [Var 6,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.ExportSpec") [],Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16._#lambda20") 6 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Curry.Types","ExportSpec") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16._#lambda20._#lambda24") [Var 1,Var 2,Var 3,Var 7,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.ImportDecl") [],Lit (Intc 11)],Var 8]],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16._#lambda20._#lambda24") 7 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Curry.Types","ExportSpec") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ImportDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16._#lambda20._#lambda24._#lambda28") [Var 1,Var 2,Var 8,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Decl") [Var 5],Lit (Intc 11)],Var 9]],Var 7])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16._#lambda20._#lambda24._#lambda28") 7 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ImportDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Curry.Types","ExportSpec") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Module") [Var 2,Var 4,Var 1,Var 5,Var 3,Var 8],Var 9],Var 7])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Module") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Module") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Module") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Module") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Module") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Module") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Module") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Module") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Module") [4,5,6,7,8,9]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ModulePragma") [],Lit (Intc 11)],Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.ModuleIdent") [Lit (Intc 11),Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ExportSpec") [],Lit (Intc 11),Var 7],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ImportDecl") [],Lit (Intc 11)],Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") [Var 1],Lit (Intc 11)],Var 9]]]]]]]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Module") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Module") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ModulePragma") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","ModulePragma") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ModulePragma") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ModulePragma") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ModulePragma") 2 Public (FuncType (TCons ("Curry.Types","ModulePragma") []) (FuncType (TCons ("Curry.Types","ModulePragma") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","LanguagePragma") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","LanguagePragma") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 5],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Extension") [],Var 4,Var 6]]),Branch (Pattern ("Curry.Types","OptionsPragma") [7,8,9]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","OptionsPragma") [10,11,12]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","LanguagePragma") [13,14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","OptionsPragma") [15,16,17]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 10,Var 15],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Tool") [],Var 11,Var 16]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 12,Var 17]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ModulePragma") 0 Public (FuncType (TCons ("Curry.Types","ModulePragma") []) (FuncType (TCons ("Curry.Types","ModulePragma") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ModulePragma") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.ModulePragma") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","ModulePragma") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ModulePragma") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43") []],Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30._#lambda33") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30._#lambda33") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30._#lambda33._#lambda37") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [33,34]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30._#lambda33._#lambda37") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30._#lambda33._#lambda37._#lambda41") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Extension") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30._#lambda33._#lambda37._#lambda41") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Extension") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","LanguagePragma") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'O')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46._#lambda50") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [31,32]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46._#lambda50") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46._#lambda50._#lambda54") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Tool") [],Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46._#lambda50._#lambda54") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Curry.Types","Tool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46._#lambda50._#lambda54._#lambda58") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46._#lambda50._#lambda54._#lambda58") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Curry.Types","Tool") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","OptionsPragma") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ModulePragma") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.ModulePragma") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.ModulePragma") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","ModulePragma") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ModulePragma") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ModulePragma") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ModulePragma") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ModulePragma") 0 Public (FuncType (TCons ("Curry.Types","ModulePragma") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ModulePragma") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ModulePragma") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","ModulePragma") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","LanguagePragma") [3,4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Extension") [],Lit (Intc 11)],Var 4]]]]]),Branch (Pattern ("Curry.Types","OptionsPragma") [5,6,7]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Tool") [],Lit (Intc 11),Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [],Lit (Intc 11)],Var 7]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ModulePragma") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ModulePragma") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ExportSpec") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","ExportSpec") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ExportSpec") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ExportSpec") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ExportSpec") 2 Public (FuncType (TCons ("Curry.Types","ExportSpec") []) (FuncType (TCons ("Curry.Types","ExportSpec") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Exporting") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Exporting") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 5],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Export") [],Var 4,Var 6]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ExportSpec") 0 Public (FuncType (TCons ("Curry.Types","ExportSpec") []) (FuncType (TCons ("Curry.Types","ExportSpec") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ExportSpec") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.ExportSpec") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","ExportSpec") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ExportSpec") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60") []],Var 2])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60._#lambda63") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60._#lambda63") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60._#lambda63._#lambda67") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60._#lambda63._#lambda67") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60._#lambda63._#lambda67._#lambda71") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Export") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60._#lambda63._#lambda67._#lambda71") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Export") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Exporting") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ExportSpec") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ExportSpec") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.ExportSpec") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.ExportSpec") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","ExportSpec") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ExportSpec") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ExportSpec") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ExportSpec") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ExportSpec") 0 Public (FuncType (TCons ("Curry.Types","ExportSpec") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ExportSpec") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ExportSpec") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","ExportSpec") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Exporting") [3,4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Export") [],Lit (Intc 11)],Var 4]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ExportSpec") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ExportSpec") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ExportSpec") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Export") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Export") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Export") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Export") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Export") 2 Public (FuncType (TCons ("Curry.Types","Export") []) (FuncType (TCons ("Curry.Types","Export") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Export") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Export") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 5],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 4,Var 6]]),Branch (Pattern ("Curry.Types","ExportTypeWith") [7,8,9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExportTypeAll") [10,11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExportModule") [12,13]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ExportTypeWith") [14,15,16]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Export") [17,18]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExportTypeWith") [19,20,21]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 14,Var 19],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 15,Var 20]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 16,Var 21]]),Branch (Pattern ("Curry.Types","ExportTypeAll") [22,23]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExportModule") [24,25]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ExportTypeAll") [26,27]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Export") [28,29]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExportTypeWith") [30,31,32]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExportTypeAll") [33,34]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 26,Var 33],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 27,Var 34]]),Branch (Pattern ("Curry.Types","ExportModule") [35,36]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ExportModule") [37,38]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Export") [39,40]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExportTypeWith") [41,42,43]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExportTypeAll") [44,45]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExportModule") [46,47]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 37,Var 46],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.ModuleIdent") [Var 38,Var 47]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Export") 0 Public (FuncType (TCons ("Curry.Types","Export") []) (FuncType (TCons ("Curry.Types","Export") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Export") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Export") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Export") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Export") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116") []],Var 2]]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73._#lambda76") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73._#lambda76") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73._#lambda76._#lambda80") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [17,18]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73._#lambda76._#lambda80") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73._#lambda76._#lambda80._#lambda84") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73._#lambda76._#lambda80._#lambda84") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Export") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'W')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89._#lambda93") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [33,34]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89._#lambda93") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89._#lambda93._#lambda97") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89._#lambda93._#lambda97") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89._#lambda93._#lambda97._#lambda101") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89._#lambda93._#lambda97._#lambda101") 4 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ExportTypeWith") [Var 2,Var 1,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103._#lambda106") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103._#lambda106") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103._#lambda106._#lambda110") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [31,32]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103._#lambda106._#lambda110") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103._#lambda106._#lambda110._#lambda114") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103._#lambda106._#lambda110._#lambda114") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ExportTypeAll") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116._#lambda119") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116._#lambda119") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'M')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116._#lambda119._#lambda123") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [29,30]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116._#lambda119._#lambda123") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116._#lambda119._#lambda123._#lambda127") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116._#lambda119._#lambda123._#lambda127") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ExportModule") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Export") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Export") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Export") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Export") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Export") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Export") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Export") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Export") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Export") 0 Public (FuncType (TCons ("Curry.Types","Export") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Export") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Export") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Export") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Export") [3,4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 4]]]]]),Branch (Pattern ("Curry.Types","ExportTypeWith") [5,6,7]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'W'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 7]]]]]]]),Branch (Pattern ("Curry.Types","ExportTypeAll") [8,9]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 9]]]]]),Branch (Pattern ("Curry.Types","ExportModule") [10,11]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 10],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.ModuleIdent") [Lit (Intc 11),Var 11]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Export") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Export") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Export") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ImportDecl") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","ImportDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ImportDecl") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ImportDecl") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ImportDecl") 2 Public (FuncType (TCons ("Curry.Types","ImportDecl") []) (FuncType (TCons ("Curry.Types","ImportDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","ImportDecl") [3,4,5,6,7]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ImportDecl") [8,9,10,11,12]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 8],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.ModuleIdent") [Var 4,Var 9]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Bool") [Var 5,Var 10]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.ModuleIdent") [],Var 6,Var 11]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ImportSpec") [],Var 7,Var 12]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ImportDecl") 0 Public (FuncType (TCons ("Curry.Types","ImportDecl") []) (FuncType (TCons ("Curry.Types","ImportDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ImportDecl") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.ImportDecl") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","ImportDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ImportDecl") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129") []],Var 2])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [25,26]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.ModuleIdent") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140._#lambda144") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Bool") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140._#lambda144") 4 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140._#lambda144._#lambda148") [Var 1,Var 2,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.ModuleIdent") [],Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140._#lambda144._#lambda148") 5 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Curry.Ident","ModuleIdent") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140._#lambda144._#lambda148._#lambda152") [Var 1,Var 2,Var 3,Var 6],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.ImportSpec") [],Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140._#lambda144._#lambda148._#lambda152") 6 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Curry.Ident","ModuleIdent") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Curry.Types","ImportSpec") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ImportDecl") [Var 2,Var 1,Var 3,Var 4,Var 7],Var 8],Var 6])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ImportDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ImportDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.ImportDecl") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.ImportDecl") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","ImportDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ImportDecl") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ImportDecl") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ImportDecl") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ImportDecl") 0 Public (FuncType (TCons ("Curry.Types","ImportDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ImportDecl") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ImportDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","ImportDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ImportDecl") [3,4,5,6,7]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.ModuleIdent") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Bool") [Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.ModuleIdent") [],Lit (Intc 11),Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ImportSpec") [],Lit (Intc 11),Var 7]]]]]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ImportDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ImportDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ImportDecl") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ImportSpec") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","ImportSpec") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ImportSpec") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ImportSpec") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ImportSpec") 2 Public (FuncType (TCons ("Curry.Types","ImportSpec") []) (FuncType (TCons ("Curry.Types","ImportSpec") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Importing") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Importing") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 5],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Import") [],Var 4,Var 6]]),Branch (Pattern ("Curry.Types","Hiding") [7,8]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Hiding") [9,10]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Importing") [11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Hiding") [13,14]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 9,Var 13],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Import") [],Var 10,Var 14]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ImportSpec") 0 Public (FuncType (TCons ("Curry.Types","ImportSpec") []) (FuncType (TCons ("Curry.Types","ImportSpec") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ImportSpec") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.ImportSpec") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","ImportSpec") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ImportSpec") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167") []],Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154._#lambda157") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154._#lambda157") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154._#lambda157._#lambda161") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154._#lambda157._#lambda161") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154._#lambda157._#lambda161._#lambda165") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Import") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154._#lambda157._#lambda161._#lambda165") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Importing") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167._#lambda170") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167._#lambda170") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'H')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167._#lambda170._#lambda174") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [17,18]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167._#lambda170._#lambda174") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167._#lambda170._#lambda174._#lambda178") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Import") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167._#lambda170._#lambda174._#lambda178") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Hiding") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ImportSpec") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ImportSpec") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.ImportSpec") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.ImportSpec") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","ImportSpec") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ImportSpec") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ImportSpec") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ImportSpec") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ImportSpec") 0 Public (FuncType (TCons ("Curry.Types","ImportSpec") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ImportSpec") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ImportSpec") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","ImportSpec") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Importing") [3,4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Import") [],Lit (Intc 11)],Var 4]]]]]),Branch (Pattern ("Curry.Types","Hiding") [5,6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'H'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Import") [],Lit (Intc 11)],Var 6]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ImportSpec") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ImportSpec") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ImportSpec") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Import") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Import") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Import") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Import") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Import") 2 Public (FuncType (TCons ("Curry.Types","Import") []) (FuncType (TCons ("Curry.Types","Import") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Import") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Import") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 5],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 4,Var 6]]),Branch (Pattern ("Curry.Types","ImportTypeWith") [7,8,9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ImportTypeAll") [10,11]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ImportTypeWith") [12,13,14]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Import") [15,16]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ImportTypeWith") [17,18,19]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 12,Var 17],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 13,Var 18]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 14,Var 19]]),Branch (Pattern ("Curry.Types","ImportTypeAll") [20,21]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ImportTypeAll") [22,23]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Import") [24,25]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ImportTypeWith") [26,27,28]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ImportTypeAll") [29,30]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 22,Var 29],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 23,Var 30]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Import") 0 Public (FuncType (TCons ("Curry.Types","Import") []) (FuncType (TCons ("Curry.Types","Import") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Import") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Import") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Import") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Import") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210") []],Var 2]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180._#lambda183") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180._#lambda183") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180._#lambda183._#lambda187") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [17,18]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180._#lambda183._#lambda187") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180._#lambda183._#lambda187._#lambda191") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180._#lambda183._#lambda187._#lambda191") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Import") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'W')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196._#lambda200") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [33,34]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196._#lambda200") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196._#lambda200._#lambda204") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196._#lambda200._#lambda204") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196._#lambda200._#lambda204._#lambda208") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196._#lambda200._#lambda204._#lambda208") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ImportTypeWith") [Var 2,Var 1,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210._#lambda213") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210._#lambda213") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210._#lambda213._#lambda217") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [31,32]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210._#lambda213._#lambda217") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210._#lambda213._#lambda217._#lambda221") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210._#lambda213._#lambda217._#lambda221") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ImportTypeAll") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Import") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Import") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Import") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Import") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Import") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Import") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Import") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Import") 0 Public (FuncType (TCons ("Curry.Types","Import") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Import") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Import") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Import") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Import") [3,4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 4]]]]]),Branch (Pattern ("Curry.Types","ImportTypeWith") [5,6,7]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'W'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 7]]]]]]]),Branch (Pattern ("Curry.Types","ImportTypeAll") [8,9]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 9]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Import") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Import") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Decl") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Decl") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Decl") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Decl") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","InfixDecl") [4,5,6,7]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [8,9,10,11]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 8],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Infix") [Var 5,Var 9]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Maybe") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Int") [],Var 6,Var 10]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 7,Var 11]]),Branch (Pattern ("Curry.Types","DataDecl") [12,13,14,15,16]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [17,18,19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [20,21,22,23,24]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [25,26,27,28]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [29,30,31]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [32,33,34,35]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [36,37]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [38,39,40]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [41,42]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [43,44]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [45,46,47,48,49]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [50,51,52,53,54]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","DataDecl") [55,56,57,58,59]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [60,61,62,63]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [64,65,66,67,68]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 55,Var 64],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 56,Var 65]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 57,Var 66]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ConstrDecl") [],Var 58,Var 67]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.QualIdent") [],Var 59,Var 68]]),Branch (Pattern ("Curry.Types","ExternalDataDecl") [69,70,71]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [72,73,74,75,76]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [77,78,79,80]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [81,82,83]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [84,85,86,87]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [88,89]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [90,91,92]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [93,94]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [95,96]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [97,98,99,100,101]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [102,103,104,105,106]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ExternalDataDecl") [107,108,109]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [110,111,112,113]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [114,115,116,117,118]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [119,120,121]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 107,Var 119],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 108,Var 120]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 109,Var 121]]),Branch (Pattern ("Curry.Types","NewtypeDecl") [122,123,124,125,126]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [127,128,129,130]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [131,132,133]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [134,135,136,137]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [138,139]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [140,141,142]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [143,144]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [145,146]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [147,148,149,150,151]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [152,153,154,155,156]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","NewtypeDecl") [157,158,159,160,161]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [162,163,164,165]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [166,167,168,169,170]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [171,172,173]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [174,175,176,177,178]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 157,Var 174],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 158,Var 175]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 159,Var 176]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.NewConstrDecl") [Var 160,Var 177]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.QualIdent") [],Var 161,Var 178]]),Branch (Pattern ("Curry.Types","TypeDecl") [179,180,181,182]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [183,184,185]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [186,187,188,189]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [190,191]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [192,193,194]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [195,196]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [197,198]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [199,200,201,202,203]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [204,205,206,207,208]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","TypeDecl") [209,210,211,212]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [213,214,215,216]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [217,218,219,220,221]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [222,223,224]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [225,226,227,228,229]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [230,231,232,233]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 209,Var 230],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 210,Var 231]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 211,Var 232]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 212,Var 233]]),Branch (Pattern ("Curry.Types","TypeSig") [234,235,236]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [237,238,239,240]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [241,242]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [243,244,245]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [246,247]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [248,249]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [250,251,252,253,254]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [255,256,257,258,259]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","TypeSig") [260,261,262]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [263,264,265,266]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [267,268,269,270,271]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [272,273,274]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [275,276,277,278,279]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [280,281,282,283]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [284,285,286]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 260,Var 284],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 261,Var 285]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.QualTypeExpr") [Var 262,Var 286]]),Branch (Pattern ("Curry.Types","FunctionDecl") [287,288,289,290]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [291,292]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [293,294,295]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [296,297]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [298,299]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [300,301,302,303,304]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [305,306,307,308,309]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","FunctionDecl") [310,311,312,313]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [314,315,316,317]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [318,319,320,321,322]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [323,324,325]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [326,327,328,329,330]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [331,332,333,334]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [335,336,337]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [338,339,340,341]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 310,Var 338],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 311],Var 339]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 312,Var 340]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Equation") [Var 1],Var 313,Var 341]]),Branch (Pattern ("Curry.Types","ExternalDecl") [342,343]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [344,345,346]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [347,348]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [349,350]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [351,352,353,354,355]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [356,357,358,359,360]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ExternalDecl") [361,362]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [363,364,365,366]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [367,368,369,370,371]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [372,373,374]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [375,376,377,378,379]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [380,381,382,383]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [384,385,386]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [387,388,389,390]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [391,392]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 361,Var 391],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Var") [Var 1],Var 362,Var 392]]),Branch (Pattern ("Curry.Types","PatternDecl") [393,394,395]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [396,397]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [398,399]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [400,401,402,403,404]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [405,406,407,408,409]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","PatternDecl") [410,411,412]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [413,414,415,416]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [417,418,419,420,421]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [422,423,424]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [425,426,427,428,429]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [430,431,432,433]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [434,435,436]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [437,438,439,440]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [441,442]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [443,444,445]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 410,Var 443],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 411,Var 444]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Rhs") [Var 1,Var 412,Var 445]]),Branch (Pattern ("Curry.Types","FreeDecl") [446,447]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [448,449]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [450,451,452,453,454]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [455,456,457,458,459]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","FreeDecl") [460,461]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [462,463,464,465]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [466,467,468,469,470]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [471,472,473]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [474,475,476,477,478]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [479,480,481,482]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [483,484,485]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [486,487,488,489]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [490,491]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [492,493,494]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [495,496]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 460,Var 495],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Var") [Var 1],Var 461,Var 496]]),Branch (Pattern ("Curry.Types","DefaultDecl") [497,498]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [499,500,501,502,503]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [504,505,506,507,508]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","DefaultDecl") [509,510]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [511,512,513,514]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [515,516,517,518,519]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [520,521,522]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [523,524,525,526,527]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [528,529,530,531]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [532,533,534]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [535,536,537,538]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [539,540]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [541,542,543]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [544,545]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [546,547]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 509,Var 546],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.TypeExpr") [],Var 510,Var 547]]),Branch (Pattern ("Curry.Types","ClassDecl") [548,549,550,551,552]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [553,554,555,556,557]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ClassDecl") [558,559,560,561,562]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [563,564,565,566]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [567,568,569,570,571]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [572,573,574]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [575,576,577,578,579]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [580,581,582,583]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [584,585,586]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [587,588,589,590]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [591,592]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [593,594,595]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [596,597]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [598,599]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [600,601,602,603,604]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 558,Var 600],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Constraint") [],Var 559,Var 601]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 560,Var 602]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 561,Var 603]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Decl") [Var 1],Var 562,Var 604]]),Branch (Pattern ("Curry.Types","InstanceDecl") [605,606,607,608,609]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","InstanceDecl") [610,611,612,613,614]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [615,616,617,618]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DataDecl") [619,620,621,622,623]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDataDecl") [624,625,626]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewtypeDecl") [627,628,629,630,631]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeDecl") [632,633,634,635]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TypeSig") [636,637,638]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionDecl") [639,640,641,642]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExternalDecl") [643,644]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PatternDecl") [645,646,647]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FreeDecl") [648,649]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","DefaultDecl") [650,651]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ClassDecl") [652,653,654,655,656]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InstanceDecl") [657,658,659,660,661]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 610,Var 657],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Constraint") [],Var 611,Var 658]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 612,Var 659]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 613,Var 660]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Decl") [Var 1],Var 614,Var 661]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Decl") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Decl") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Decl") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223") []],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244") []],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269") []],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286") []],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311") []],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332") []],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413") []],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426") [Var 1]],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451") [Var 1]],Var 3]]]]]]]]]]]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230._#lambda234") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230._#lambda234") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230._#lambda234._#lambda238") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Maybe") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Int") [],Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230._#lambda234._#lambda238") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Infix") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230._#lambda234._#lambda238._#lambda242") [Var 1,Var 2,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230._#lambda234._#lambda238._#lambda242") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Infix") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","InfixDecl") [Var 1,Var 2,Var 3,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [21,22]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255._#lambda259") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255._#lambda259") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255._#lambda259._#lambda263") [Var 1,Var 2,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.ConstrDecl") [],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255._#lambda259._#lambda263") 5 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ConstrDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255._#lambda259._#lambda263._#lambda267") [Var 1,Var 2,Var 3,Var 6],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.QualIdent") [],Lit (Intc 11)],Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255._#lambda259._#lambda263._#lambda267") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ConstrDecl") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","QualIdent") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","DataDecl") [Var 2,Var 1,Var 3,Var 4,Var 7],Var 8],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 33,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 35,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 36) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272._#lambda276") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [37,38]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272._#lambda276") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272._#lambda276._#lambda280") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272._#lambda276._#lambda280") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272._#lambda276._#lambda280._#lambda284") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272._#lambda276._#lambda280._#lambda284") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ExternalDataDecl") [Var 2,Var 1,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'N')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'w')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [27,28]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297._#lambda301") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297._#lambda301") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297._#lambda301._#lambda305") [Var 1,Var 2,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297._#lambda301._#lambda305") 5 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297._#lambda301._#lambda305._#lambda309") [Var 1,Var 2,Var 6,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.QualIdent") [],Lit (Intc 11)],Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297._#lambda301._#lambda305._#lambda309") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","QualIdent") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","NewtypeDecl") [Var 2,Var 1,Var 4,Var 3,Var 7],Var 8],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [21,22]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318._#lambda322") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318._#lambda322") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318._#lambda322._#lambda326") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318._#lambda322._#lambda326") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318._#lambda322._#lambda326._#lambda330") [Var 1,Var 2,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318._#lambda322._#lambda326._#lambda330") 5 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","TypeDecl") [Var 2,Var 1,Var 3,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'S')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335._#lambda339") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [19,20]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335._#lambda339") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335._#lambda339._#lambda343") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335._#lambda339._#lambda343") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335._#lambda339._#lambda343._#lambda347") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335._#lambda339._#lambda343._#lambda347") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","TypeSig") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [30,31]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356._#lambda360") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356._#lambda360") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356._#lambda360._#lambda364") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356._#lambda360._#lambda364") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356._#lambda360._#lambda364._#lambda368") [Var 6,Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Equation") [Var 3],Lit (Intc 11)],Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356._#lambda360._#lambda364._#lambda368") 5 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Equation") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","FunctionDecl") [Var 2,Var 3,Var 1,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370._#lambda373") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370._#lambda373") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370._#lambda373._#lambda377") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [30,31]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370._#lambda373._#lambda377") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370._#lambda373._#lambda377._#lambda381") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Var") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370._#lambda373._#lambda377._#lambda381") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ExternalDecl") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386._#lambda390") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [28,29]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386._#lambda390") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386._#lambda390._#lambda394") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386._#lambda390._#lambda394") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386._#lambda390._#lambda394._#lambda398") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386._#lambda390._#lambda394._#lambda398") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","PatternDecl") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400._#lambda403") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400._#lambda403") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400._#lambda403._#lambda407") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [22,23]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400._#lambda403._#lambda407") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400._#lambda403._#lambda407._#lambda411") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Var") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400._#lambda403._#lambda407._#lambda411") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","FreeDecl") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413._#lambda416") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413._#lambda416") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413._#lambda416._#lambda420") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [27,28]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413._#lambda416._#lambda420") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413._#lambda416._#lambda420._#lambda424") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.TypeExpr") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413._#lambda416._#lambda420._#lambda424") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","DefaultDecl") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [24,25]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Constraint") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437._#lambda441") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437._#lambda441") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437._#lambda441._#lambda445") [Var 6,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437._#lambda441._#lambda445") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437._#lambda441._#lambda445._#lambda449") [Var 1,Var 7,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Decl") [Var 4],Lit (Intc 11)],Var 8]],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437._#lambda441._#lambda445._#lambda449") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ClassDecl") [Var 3,Var 4,Var 1,Var 2,Var 7],Var 8],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [30,31]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Constraint") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462._#lambda466") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462._#lambda466") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462._#lambda466._#lambda470") [Var 6,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462._#lambda466._#lambda470") 6 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462._#lambda466._#lambda470._#lambda474") [Var 1,Var 2,Var 7,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Decl") [Var 4],Lit (Intc 11)],Var 8]],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462._#lambda466._#lambda470._#lambda474") 6 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","InstanceDecl") [Var 2,Var 4,Var 1,Var 3,Var 7],Var 8],Var 6])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Decl") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Decl") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Decl") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Decl") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Decl") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Decl") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixDecl") [4,5,6,7]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Infix") [Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Maybe") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Int") [],Lit (Intc 11),Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 7]]]]]]]]]),Branch (Pattern ("Curry.Types","DataDecl") [8,9,10,11,12]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 9],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 10],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ConstrDecl") [],Lit (Intc 11)],Var 11],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.QualIdent") [],Lit (Intc 11)],Var 12]]]]]]]]]]]),Branch (Pattern ("Curry.Types","ExternalDataDecl") [13,14,15]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 13],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 14],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 15]]]]]]]),Branch (Pattern ("Curry.Types","NewtypeDecl") [16,17,18,19,20]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 16],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 17],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 18],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.NewConstrDecl") [Lit (Intc 11),Var 19],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.QualIdent") [],Lit (Intc 11)],Var 20]]]]]]]]]]]),Branch (Pattern ("Curry.Types","TypeDecl") [21,22,23,24]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 21],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 22],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 23],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 24]]]]]]]]]),Branch (Pattern ("Curry.Types","TypeSig") [25,26,27]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 25],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 26],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.QualTypeExpr") [Lit (Intc 11),Var 27]]]]]]]),Branch (Pattern ("Curry.Types","FunctionDecl") [28,29,30,31]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 28],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 29],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 30],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Equation") [Var 1],Lit (Intc 11)],Var 31]]]]]]]]]),Branch (Pattern ("Curry.Types","ExternalDecl") [32,33]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 32],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Var") [Var 1],Lit (Intc 11)],Var 33]]]]]),Branch (Pattern ("Curry.Types","PatternDecl") [34,35,36]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 34],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 35],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Rhs") [Var 1,Lit (Intc 11),Var 36]]]]]]]),Branch (Pattern ("Curry.Types","FreeDecl") [37,38]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 37],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Var") [Var 1],Lit (Intc 11)],Var 38]]]]]),Branch (Pattern ("Curry.Types","DefaultDecl") [39,40]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 39],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.TypeExpr") [],Lit (Intc 11)],Var 40]]]]]),Branch (Pattern ("Curry.Types","ClassDecl") [41,42,43,44,45]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 41],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Constraint") [],Lit (Intc 11)],Var 42],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 43],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 44],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") [Var 1],Lit (Intc 11)],Var 45]]]]]]]]]]]),Branch (Pattern ("Curry.Types","InstanceDecl") [46,47,48,49,50]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 46],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Constraint") [],Lit (Intc 11)],Var 47],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 48],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 49],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") [Var 1],Lit (Intc 11)],Var 50]]]]]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Infix") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Infix") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Infix") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Infix") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Infix") 2 Public (FuncType (TCons ("Curry.Types","Infix") []) (FuncType (TCons ("Curry.Types","Infix") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","InfixL") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","InfixL") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","InfixR") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Infix") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","InfixR") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","InfixL") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixR") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","Infix") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Infix") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","InfixL") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixR") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Infix") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Infix") 0 Public (FuncType (TCons ("Curry.Types","Infix") []) (FuncType (TCons ("Curry.Types","Infix") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Infix") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Infix") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Infix") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Infix") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda476") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda481") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda486") []],Var 2]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda476") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda476._#lambda479") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda476._#lambda479") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","InfixL") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [17,18]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda481") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda481._#lambda484") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda481._#lambda484") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","InfixR") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [17,18]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda486") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda486._#lambda489") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda486._#lambda489") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Infix") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [15,16]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Infix") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Infix") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Infix") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Infix") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Infix") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Infix") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Infix") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Infix") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Infix") 0 Public (FuncType (TCons ("Curry.Types","Infix") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Infix") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Infix") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Infix") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","InfixL") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Curry.Types","InfixR") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Curry.Types","Infix") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Infix") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Infix") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Infix") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ConstrDecl") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","ConstrDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ConstrDecl") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ConstrDecl") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ConstrDecl") 2 Public (FuncType (TCons ("Curry.Types","ConstrDecl") []) (FuncType (TCons ("Curry.Types","ConstrDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","ConstrDecl") [3,4,5,6,7]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstrDecl") [8,9,10,11,12]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 8],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 4,Var 9]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Constraint") [],Var 5,Var 10]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 6,Var 11]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.TypeExpr") [],Var 7,Var 12]]),Branch (Pattern ("Curry.Types","ConOpDecl") [13,14,15,16,17,18]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordDecl") [19,20,21,22,23]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ConOpDecl") [24,25,26,27,28,29]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstrDecl") [30,31,32,33,34]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConOpDecl") [35,36,37,38,39,40]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 24,Var 35],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 25,Var 36]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Constraint") [],Var 26,Var 37]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 27,Var 38]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 28,Var 39]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 29,Var 40]]),Branch (Pattern ("Curry.Types","RecordDecl") [41,42,43,44,45]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","RecordDecl") [46,47,48,49,50]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstrDecl") [51,52,53,54,55]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConOpDecl") [56,57,58,59,60,61]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordDecl") [62,63,64,65,66]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 46,Var 62],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 47,Var 63]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Constraint") [],Var 48,Var 64]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 49,Var 65]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.FieldDecl") [],Var 50,Var 66]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ConstrDecl") 0 Public (FuncType (TCons ("Curry.Types","ConstrDecl") []) (FuncType (TCons ("Curry.Types","ConstrDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ConstrDecl") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.ConstrDecl") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","ConstrDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ConstrDecl") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545") []],Var 2]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [25,26]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502._#lambda506") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Constraint") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502._#lambda506") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502._#lambda506._#lambda510") [Var 1,Var 2,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502._#lambda506._#lambda510") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502._#lambda506._#lambda510._#lambda514") [Var 6,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.TypeExpr") [],Lit (Intc 11)],Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502._#lambda506._#lambda510._#lambda514") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ConstrDecl") [Var 2,Var 3,Var 4,Var 1,Var 7],Var 8],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'O')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Constraint") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531._#lambda535") [Var 1,Var 2,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531._#lambda535") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531._#lambda535._#lambda539") [Var 1,Var 6,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531._#lambda535._#lambda539") 6 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531._#lambda535._#lambda539._#lambda543") [Var 7,Var 1,Var 2,Var 3,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 8]],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531._#lambda535._#lambda539._#lambda543") 7 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [1,2,3,4,5,6,7] (Case Rigid (Var 6) [Branch (Pattern ("Prelude","(,)") [8,9]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ConOpDecl") [Var 2,Var 4,Var 5,Var 3,Var 1,Var 8],Var 9],Var 7])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [25,26]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556._#lambda560") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Constraint") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556._#lambda560") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556._#lambda560._#lambda564") [Var 1,Var 2,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556._#lambda560._#lambda564") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556._#lambda560._#lambda564._#lambda568") [Var 6,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.FieldDecl") [],Lit (Intc 11)],Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556._#lambda560._#lambda564._#lambda568") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","FieldDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","RecordDecl") [Var 2,Var 3,Var 4,Var 1,Var 7],Var 8],Var 6])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ConstrDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ConstrDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.ConstrDecl") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.ConstrDecl") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","ConstrDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ConstrDecl") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ConstrDecl") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ConstrDecl") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ConstrDecl") 0 Public (FuncType (TCons ("Curry.Types","ConstrDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ConstrDecl") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ConstrDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","ConstrDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstrDecl") [3,4,5,6,7]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Constraint") [],Lit (Intc 11)],Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.TypeExpr") [],Lit (Intc 11)],Var 7]]]]]]]]]]]),Branch (Pattern ("Curry.Types","ConOpDecl") [8,9,10,11,12,13]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 9],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Constraint") [],Lit (Intc 11)],Var 10],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 11],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 12],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 13]]]]]]]]]]]]]),Branch (Pattern ("Curry.Types","RecordDecl") [14,15,16,17,18]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 14],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 15],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Constraint") [],Lit (Intc 11)],Var 16],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 17],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.FieldDecl") [],Lit (Intc 11)],Var 18]]]]]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ConstrDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ConstrDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.ConstrDecl") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.NewConstrDecl") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","NewConstrDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.NewConstrDecl") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.NewConstrDecl") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.NewConstrDecl") 2 Public (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","NewConstrDecl") [3,4,5]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","NewConstrDecl") [6,7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 6],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 4,Var 7]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 5,Var 8]]),Branch (Pattern ("Curry.Types","NewRecordDecl") [9,10,11]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","NewRecordDecl") [12,13,14]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","NewConstrDecl") [15,16,17]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NewRecordDecl") [18,19,20]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 12,Var 18],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 13,Var 19]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#(,)") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.TypeExpr") [],Var 14,Var 20]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.NewConstrDecl") 0 Public (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.NewConstrDecl") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.NewConstrDecl") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","NewConstrDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.NewConstrDecl") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587") []],Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'N')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'w')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573._#lambda577") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [31,32]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573._#lambda577") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573._#lambda577._#lambda581") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573._#lambda577._#lambda581") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573._#lambda577._#lambda581._#lambda585") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573._#lambda577._#lambda581._#lambda585") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","NewConstrDecl") [Var 2,Var 1,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'N')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'w')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590._#lambda594") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [31,32]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590._#lambda594") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590._#lambda594._#lambda598") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590._#lambda594._#lambda598") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590._#lambda594._#lambda598._#lambda602") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#(,)") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.TypeExpr") [],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590._#lambda594._#lambda598._#lambda602") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","TypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","NewRecordDecl") [Var 2,Var 1,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.NewConstrDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","NewConstrDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.NewConstrDecl") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.NewConstrDecl") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","NewConstrDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.NewConstrDecl") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.NewConstrDecl") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.NewConstrDecl") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.NewConstrDecl") 0 Public (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.NewConstrDecl") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.NewConstrDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","NewConstrDecl") [3,4,5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]]]]]]]),Branch (Pattern ("Curry.Types","NewRecordDecl") [6,7,8]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 7],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#(,)") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.TypeExpr") [],Lit (Intc 11),Var 8]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.NewConstrDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","NewConstrDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.NewConstrDecl") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.FieldDecl") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","FieldDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.FieldDecl") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.FieldDecl") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.FieldDecl") 2 Public (FuncType (TCons ("Curry.Types","FieldDecl") []) (FuncType (TCons ("Curry.Types","FieldDecl") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","FieldDecl") [3,4,5]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","FieldDecl") [6,7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 6],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 4,Var 7]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 5,Var 8]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.FieldDecl") 0 Public (FuncType (TCons ("Curry.Types","FieldDecl") []) (FuncType (TCons ("Curry.Types","FieldDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.FieldDecl") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.FieldDecl") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","FieldDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.FieldDecl") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604") []],Var 2])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607._#lambda611") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607._#lambda611") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607._#lambda611._#lambda615") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607._#lambda611._#lambda615") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607._#lambda611._#lambda615._#lambda619") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607._#lambda611._#lambda615._#lambda619") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","FieldDecl") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.FieldDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","FieldDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.FieldDecl") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.FieldDecl") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","FieldDecl") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.FieldDecl") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.FieldDecl") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.FieldDecl") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.FieldDecl") 0 Public (FuncType (TCons ("Curry.Types","FieldDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.FieldDecl") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.FieldDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","FieldDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","FieldDecl") [3,4,5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.FieldDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","FieldDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.FieldDecl") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.TypeExpr") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","TypeExpr") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.TypeExpr") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") 2 Public (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","ConstructorType") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstructorType") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 5],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 4,Var 6]]),Branch (Pattern ("Curry.Types","ApplyType") [7,8,9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariableType") [10,11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TupleType") [12,13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListType") [14,15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ArrowType") [16,17,18]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenType") [19,20]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ForallType") [21,22,23]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ApplyType") [24,25,26]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstructorType") [27,28]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ApplyType") [29,30,31]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 24,Var 29],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 25,Var 30]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 26,Var 31]]),Branch (Pattern ("Curry.Types","VariableType") [32,33]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TupleType") [34,35]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListType") [36,37]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ArrowType") [38,39,40]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenType") [41,42]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ForallType") [43,44,45]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","VariableType") [46,47]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstructorType") [48,49]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ApplyType") [50,51,52]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariableType") [53,54]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 46,Var 53],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 47,Var 54]]),Branch (Pattern ("Curry.Types","TupleType") [55,56]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListType") [57,58]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ArrowType") [59,60,61]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenType") [62,63]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ForallType") [64,65,66]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","TupleType") [67,68]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstructorType") [69,70]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ApplyType") [71,72,73]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariableType") [74,75]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TupleType") [76,77]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 67,Var 76],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.TypeExpr") [],Var 68,Var 77]]),Branch (Pattern ("Curry.Types","ListType") [78,79]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ArrowType") [80,81,82]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenType") [83,84]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ForallType") [85,86,87]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ListType") [88,89]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstructorType") [90,91]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ApplyType") [92,93,94]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariableType") [95,96]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TupleType") [97,98]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListType") [99,100]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 88,Var 99],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 89,Var 100]]),Branch (Pattern ("Curry.Types","ArrowType") [101,102,103]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenType") [104,105]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ForallType") [106,107,108]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ArrowType") [109,110,111]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstructorType") [112,113]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ApplyType") [114,115,116]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariableType") [117,118]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TupleType") [119,120]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListType") [121,122]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ArrowType") [123,124,125]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 109,Var 123],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 110,Var 124]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 111,Var 125]]),Branch (Pattern ("Curry.Types","ParenType") [126,127]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ForallType") [128,129,130]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ParenType") [131,132]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstructorType") [133,134]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ApplyType") [135,136,137]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariableType") [138,139]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TupleType") [140,141]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListType") [142,143]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ArrowType") [144,145,146]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenType") [147,148]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 131,Var 147],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 132,Var 148]]),Branch (Pattern ("Curry.Types","ForallType") [149,150,151]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ForallType") [152,153,154]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstructorType") [155,156]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ApplyType") [157,158,159]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariableType") [160,161]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TupleType") [162,163]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListType") [164,165]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ArrowType") [166,167,168]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenType") [169,170]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ForallType") [171,172,173]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 152,Var 171],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Eq#Curry.Ident.Ident") [],Var 153,Var 172]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 154,Var 173]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.TypeExpr") 0 Public (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.TypeExpr") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.TypeExpr") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","TypeExpr") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.TypeExpr") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720") []],Var 2]]]]]]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621._#lambda624") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621._#lambda624") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 33,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 34) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621._#lambda624._#lambda628") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [35,36]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621._#lambda624._#lambda628") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621._#lambda624._#lambda628._#lambda632") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621._#lambda624._#lambda628._#lambda632") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ConstructorType") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637._#lambda641") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637._#lambda641") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637._#lambda641._#lambda645") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637._#lambda641._#lambda645") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637._#lambda641._#lambda645._#lambda649") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637._#lambda641._#lambda645._#lambda649") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ApplyType") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651._#lambda654") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651._#lambda654") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'V')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'b')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651._#lambda654._#lambda658") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [29,30]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651._#lambda654._#lambda658") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651._#lambda654._#lambda658._#lambda662") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651._#lambda654._#lambda658._#lambda662") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","VariableType") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664._#lambda667") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664._#lambda667") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664._#lambda667._#lambda671") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664._#lambda667._#lambda671") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664._#lambda667._#lambda671._#lambda675") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.TypeExpr") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664._#lambda667._#lambda671._#lambda675") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","TupleType") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677._#lambda680") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677._#lambda680") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677._#lambda680._#lambda684") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [21,22]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677._#lambda680._#lambda684") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677._#lambda680._#lambda684._#lambda688") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677._#lambda680._#lambda684._#lambda688") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ListType") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'w')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693._#lambda697") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693._#lambda697") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693._#lambda697._#lambda701") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693._#lambda697._#lambda701") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693._#lambda697._#lambda701._#lambda705") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693._#lambda697._#lambda701._#lambda705") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ArrowType") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707._#lambda710") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707._#lambda710") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707._#lambda710._#lambda714") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [23,24]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707._#lambda710._#lambda714") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707._#lambda710._#lambda714._#lambda718") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707._#lambda710._#lambda714._#lambda718") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ParenType") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723._#lambda727") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [25,26]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723._#lambda727") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723._#lambda727._#lambda731") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Read#Curry.Ident.Ident") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723._#lambda727._#lambda731") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723._#lambda727._#lambda731._#lambda735") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723._#lambda727._#lambda731._#lambda735") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ForallType") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.TypeExpr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.TypeExpr") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.TypeExpr") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","TypeExpr") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.TypeExpr") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.TypeExpr") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.TypeExpr") 0 Public (FuncType (TCons ("Curry.Types","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.TypeExpr") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","ConstructorType") [3,4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 4]]]]]),Branch (Pattern ("Curry.Types","ApplyType") [5,6,7]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 7]]]]]]]),Branch (Pattern ("Curry.Types","VariableType") [8,9]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'V'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 9]]]]]),Branch (Pattern ("Curry.Types","TupleType") [10,11]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 10],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.TypeExpr") [],Lit (Intc 11)],Var 11]]]]]),Branch (Pattern ("Curry.Types","ListType") [12,13]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 12],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 13]]]]]),Branch (Pattern ("Curry.Types","ArrowType") [14,15,16]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 14],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 15],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 16]]]]]]]),Branch (Pattern ("Curry.Types","ParenType") [17,18]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 17],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 18]]]]]),Branch (Pattern ("Curry.Types","ForallType") [19,20,21]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 19],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Ident","_inst#Prelude.Show#Curry.Ident.Ident") [],Lit (Intc 11)],Var 20],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 21]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.TypeExpr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.TypeExpr") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.QualTypeExpr") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","QualTypeExpr") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.QualTypeExpr") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.QualTypeExpr") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.QualTypeExpr") 2 Public (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","QualTypeExpr") [3,4,5]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","QualTypeExpr") [6,7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 6],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Constraint") [],Var 4,Var 7]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 5,Var 8]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.QualTypeExpr") 0 Public (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.QualTypeExpr") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.QualTypeExpr") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","QualTypeExpr") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.QualTypeExpr") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737") []],Var 2])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'Q')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740._#lambda744") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [29,30]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740._#lambda744") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740._#lambda744._#lambda748") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Constraint") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740._#lambda744._#lambda748") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740._#lambda744._#lambda748._#lambda752") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740._#lambda744._#lambda748._#lambda752") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","QualTypeExpr") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.QualTypeExpr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","QualTypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.QualTypeExpr") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.QualTypeExpr") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","QualTypeExpr") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.QualTypeExpr") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.QualTypeExpr") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.QualTypeExpr") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.QualTypeExpr") 0 Public (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.QualTypeExpr") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.QualTypeExpr") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","QualTypeExpr") [3,4,5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'Q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Constraint") [],Lit (Intc 11)],Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.QualTypeExpr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","QualTypeExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.QualTypeExpr") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Constraint") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Constraint") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Constraint") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Constraint") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Constraint") 2 Public (FuncType (TCons ("Curry.Types","Constraint") []) (FuncType (TCons ("Curry.Types","Constraint") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Constraint") [3,4,5]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Constraint") [6,7,8]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 3,Var 6],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 4,Var 7]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") [Var 5,Var 8]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Constraint") 0 Public (FuncType (TCons ("Curry.Types","Constraint") []) (FuncType (TCons ("Curry.Types","Constraint") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Constraint") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Constraint") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Constraint") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Constraint") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754") []],Var 2])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757._#lambda761") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [25,26]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757._#lambda761") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757._#lambda761._#lambda765") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757._#lambda761._#lambda765") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757._#lambda761._#lambda765._#lambda769") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757._#lambda761._#lambda765._#lambda769") 4 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Constraint") [Var 2,Var 1,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Constraint") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Constraint") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Constraint") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Constraint") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Constraint") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Constraint") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Constraint") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Constraint") 0 Public (FuncType (TCons ("Curry.Types","Constraint") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Constraint") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Constraint") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Constraint") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Constraint") [3,4,5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") [Lit (Intc 11),Var 5]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Constraint") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Constraint") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Equation") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Equation") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Equation") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Equation") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Equation") [4,5,6]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Equation") [7,8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 7],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Lhs") [Var 1,Var 5,Var 8]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Rhs") [Var 1,Var 6,Var 9]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Equation") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Equation") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Equation") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771") [Var 1]],Var 3])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'q')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774._#lambda778") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [22,23]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774._#lambda778") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774._#lambda778._#lambda782") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774._#lambda778._#lambda782") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774._#lambda778._#lambda782._#lambda786") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774._#lambda778._#lambda782._#lambda786") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Equation") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Equation") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Equation") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Equation") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Equation") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Equation") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Equation") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Equation") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Equation") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Equation") [4,5,6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Lhs") [Var 1,Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Rhs") [Var 1,Lit (Intc 11),Var 6]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Equation") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Equation") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Lhs") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Lhs") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Lhs") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Lhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","FunLhs") [4,5,6]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","FunLhs") [7,8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 7],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 5,Var 8]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") [Var 1],Var 6,Var 9]]),Branch (Pattern ("Curry.Types","OpLhs") [10,11,12,13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ApLhs") [14,15,16]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","OpLhs") [17,18,19,20]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","FunLhs") [21,22,23]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","OpLhs") [24,25,26,27]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 17,Var 24],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 18,Var 25]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 19,Var 26]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 20,Var 27]]),Branch (Pattern ("Curry.Types","ApLhs") [28,29,30]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ApLhs") [31,32,33]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","FunLhs") [34,35,36]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","OpLhs") [37,38,39,40]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ApLhs") [41,42,43]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 31,Var 41],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Lhs") [Var 1,Var 32,Var 42]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") [Var 1],Var 33,Var 43]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Lhs") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Lhs") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Lhs") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805") [Var 1]],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826") [Var 1]],Var 3]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791._#lambda795") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [18,19]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791._#lambda795") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791._#lambda795._#lambda799") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791._#lambda795._#lambda799") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791._#lambda795._#lambda799._#lambda803") [Var 5,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") [Var 2],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791._#lambda795._#lambda799._#lambda803") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","FunLhs") [Var 2,Var 1,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'O')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [16,17]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812._#lambda816") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812._#lambda816") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812._#lambda816._#lambda820") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812._#lambda816._#lambda820") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812._#lambda816._#lambda820._#lambda824") [Var 6,Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 3,Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812._#lambda816._#lambda820._#lambda824") 5 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","OpLhs") [Var 2,Var 3,Var 1,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829._#lambda833") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [16,17]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829._#lambda833") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829._#lambda833._#lambda837") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829._#lambda833._#lambda837") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829._#lambda833._#lambda837._#lambda841") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") [Var 2],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829._#lambda833._#lambda837._#lambda841") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ApLhs") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Lhs") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Lhs") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Lhs") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Lhs") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Lhs") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Lhs") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Lhs") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Lhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","FunLhs") [4,5,6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") [Var 1],Lit (Intc 11)],Var 6]]]]]]]),Branch (Pattern ("Curry.Types","OpLhs") [7,8,9,10]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 7],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 9],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 10]]]]]]]]]),Branch (Pattern ("Curry.Types","ApLhs") [11,12,13]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 11],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Lhs") [Var 1,Lit (Intc 11),Var 12],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") [Var 1],Lit (Intc 11)],Var 13]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Lhs") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Lhs") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Rhs") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Rhs") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Rhs") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Rhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","SimpleRhs") [4,5,6]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","SimpleRhs") [7,8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 7],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 5,Var 8]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Decl") [Var 1],Var 6,Var 9]]),Branch (Pattern ("Curry.Types","GuardedRhs") [10,11,12]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","GuardedRhs") [13,14,15]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","SimpleRhs") [16,17,18]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","GuardedRhs") [19,20,21]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 13,Var 19],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.CondExpr") [Var 1],Var 14,Var 20]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Decl") [Var 1],Var 15,Var 21]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Rhs") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Rhs") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Rhs") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843") [Var 1]],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860") [Var 1]],Var 3]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'S')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846._#lambda850") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [24,25]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846._#lambda850") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846._#lambda850._#lambda854") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846._#lambda850._#lambda854") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846._#lambda850._#lambda854._#lambda858") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Decl") [Var 2],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846._#lambda850._#lambda854._#lambda858") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","SimpleRhs") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'G')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863._#lambda867") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [26,27]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863._#lambda867") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863._#lambda867._#lambda871") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.CondExpr") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863._#lambda867._#lambda871") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","CondExpr") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863._#lambda867._#lambda871._#lambda875") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Decl") [Var 2],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863._#lambda867._#lambda871._#lambda875") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","CondExpr") [TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","GuardedRhs") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Rhs") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Rhs") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Rhs") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Rhs") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Rhs") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Rhs") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Rhs") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Rhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","SimpleRhs") [4,5,6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") [Var 1],Lit (Intc 11)],Var 6]]]]]]]),Branch (Pattern ("Curry.Types","GuardedRhs") [7,8,9]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'G'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 7],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.CondExpr") [Var 1],Lit (Intc 11)],Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") [Var 1],Lit (Intc 11)],Var 9]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Rhs") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Rhs") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","CondExpr") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.CondExpr") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.CondExpr") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.CondExpr") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","CondExpr") [4,5,6]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","CondExpr") [7,8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 7],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 5,Var 8]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 6,Var 9]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.CondExpr") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","CondExpr") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.CondExpr") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877") [Var 1]],Var 3])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880._#lambda884") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [22,23]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880._#lambda884") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880._#lambda884._#lambda888") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880._#lambda884._#lambda888") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880._#lambda884._#lambda888._#lambda892") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880._#lambda884._#lambda888._#lambda892") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","CondExpr") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","CondExpr") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.CondExpr") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","CondExpr") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.CondExpr") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.CondExpr") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.CondExpr") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.CondExpr") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.CondExpr") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","CondExpr") [4,5,6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 6]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","CondExpr") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.CondExpr") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Literal") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Literal") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Literal") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Literal") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Literal") 2 Public (FuncType (TCons ("Curry.Types","Literal") []) (FuncType (TCons ("Curry.Types","Literal") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Char") [3]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Char") [4]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 3,Var 4]),Branch (Pattern ("Curry.Types","Int") [5]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Float") [6]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","String") [7]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Int") [8]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Char") [9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Int") [10]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Int") [Var 8,Var 10]),Branch (Pattern ("Curry.Types","Float") [11]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","String") [12]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Float") [13]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Char") [14]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Int") [15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Float") [16]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Float") [Var 13,Var 16]),Branch (Pattern ("Curry.Types","String") [17]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","String") [18]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Char") [19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Int") [20]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Float") [21]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","String") [22]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 18,Var 22])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Literal") 0 Public (FuncType (TCons ("Curry.Types","Literal") []) (FuncType (TCons ("Curry.Types","Literal") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Literal") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Literal") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Literal") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Literal") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda894") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda903") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda912") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda921") []],Var 2]]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda894") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda894._#lambda897") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda894._#lambda897") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda894._#lambda897._#lambda901") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Char") [Lit (Intc 11)],Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [13,14]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda894._#lambda897._#lambda901") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Char") [Var 3],Var 4],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda903") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda903._#lambda906") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda903._#lambda906") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda903._#lambda906._#lambda910") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Int") [Lit (Intc 11)],Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [11,12]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda903._#lambda906._#lambda910") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Int") [Var 3],Var 4],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda912") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda912._#lambda915") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda912._#lambda915") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda912._#lambda915._#lambda919") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#Prelude.Float") [Lit (Intc 11)],Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [15,16]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda912._#lambda915._#lambda919") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Float") [Var 3],Var 4],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda921") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda921._#lambda924") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda921._#lambda924") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'S')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda921._#lambda924._#lambda928") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [],Lit (Intc 11)],Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [17,18]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda921._#lambda924._#lambda928") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","String") [Var 3],Var 4],Var 2])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Literal") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Literal") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Literal") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Literal") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Literal") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Literal") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Literal") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Literal") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Literal") 0 Public (FuncType (TCons ("Curry.Types","Literal") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Literal") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Literal") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Literal") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Char") [3]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Char") [Lit (Intc 11),Var 3]]]),Branch (Pattern ("Curry.Types","Int") [4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Int") [],Lit (Intc 11)],Var 4]]]),Branch (Pattern ("Curry.Types","Float") [5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#Prelude.Float") [],Lit (Intc 11)],Var 5]]]),Branch (Pattern ("Curry.Types","String") [6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [],Lit (Intc 11)],Var 6]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Literal") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Literal") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Literal") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Pattern") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Pattern") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","LiteralPattern") [4,5,6]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [7,8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 7],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 5],Var 8]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Literal") [Var 6,Var 9]]),Branch (Pattern ("Curry.Types","NegativePattern") [10,11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [13,14,15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [16,17,18,19]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [20,21,22,23,24]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [25,26]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [27,28,29,30]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [31,32]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [33,34,35]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [36,37,38]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [39,40]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [41,42,43,44]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [45,46,47,48,49]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","NegativePattern") [50,51,52]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [53,54,55]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [56,57,58]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 50,Var 56],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 51],Var 57]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Literal") [Var 52,Var 58]]),Branch (Pattern ("Curry.Types","VariablePattern") [59,60,61]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [62,63,64,65]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [66,67,68,69,70]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [71,72]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [73,74,75,76]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [77,78]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [79,80,81]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [82,83,84]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [85,86]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [87,88,89,90]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [91,92,93,94,95]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","VariablePattern") [96,97,98]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [99,100,101]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [102,103,104]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [105,106,107]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 96,Var 105],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 97],Var 106]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 98,Var 107]]),Branch (Pattern ("Curry.Types","ConstructorPattern") [108,109,110,111]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [112,113,114,115,116]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [117,118]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [119,120,121,122]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [123,124]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [125,126,127]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [128,129,130]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [131,132]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [133,134,135,136]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [137,138,139,140,141]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ConstructorPattern") [142,143,144,145]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [146,147,148]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [149,150,151]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [152,153,154]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [155,156,157,158]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 142,Var 155],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 143],Var 156]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 144,Var 157]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") [Var 1],Var 145,Var 158]]),Branch (Pattern ("Curry.Types","InfixPattern") [159,160,161,162,163]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [164,165]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [166,167,168,169]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [170,171]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [172,173,174]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [175,176,177]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [178,179]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [180,181,182,183]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [184,185,186,187,188]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","InfixPattern") [189,190,191,192,193]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [194,195,196]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [197,198,199]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [200,201,202]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [203,204,205,206]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [207,208,209,210,211]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 189,Var 207],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 190],Var 208]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 191,Var 209]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 192,Var 210]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 193,Var 211]]),Branch (Pattern ("Curry.Types","ParenPattern") [212,213]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [214,215,216,217]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [218,219]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [220,221,222]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [223,224,225]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [226,227]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [228,229,230,231]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [232,233,234,235,236]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ParenPattern") [237,238]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [239,240,241]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [242,243,244]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [245,246,247]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [248,249,250,251]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [252,253,254,255,256]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [257,258]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 237,Var 257],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 238,Var 258]]),Branch (Pattern ("Curry.Types","RecordPattern") [259,260,261,262]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [263,264]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [265,266,267]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [268,269,270]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [271,272]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [273,274,275,276]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [277,278,279,280,281]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","RecordPattern") [282,283,284,285]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [286,287,288]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [289,290,291]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [292,293,294]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [295,296,297,298]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [299,300,301,302,303]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [304,305]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [306,307,308,309]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 282,Var 306],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 283],Var 307]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 284,Var 308]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Field") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") [Var 1]],Var 285,Var 309]]),Branch (Pattern ("Curry.Types","TuplePattern") [310,311]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [312,313,314]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [315,316,317]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [318,319]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [320,321,322,323]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [324,325,326,327,328]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","TuplePattern") [329,330]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [331,332,333]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [334,335,336]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [337,338,339]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [340,341,342,343]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [344,345,346,347,348]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [349,350]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [351,352,353,354]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [355,356]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 329,Var 355],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") [Var 1],Var 330,Var 356]]),Branch (Pattern ("Curry.Types","ListPattern") [357,358,359]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [360,361,362]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [363,364]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [365,366,367,368]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [369,370,371,372,373]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ListPattern") [374,375,376]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [377,378,379]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [380,381,382]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [383,384,385]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [386,387,388,389]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [390,391,392,393,394]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [395,396]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [397,398,399,400]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [401,402]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [403,404,405]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 374,Var 403],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 375],Var 404]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") [Var 1],Var 376,Var 405]]),Branch (Pattern ("Curry.Types","AsPattern") [406,407,408]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [409,410]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [411,412,413,414]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [415,416,417,418,419]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","AsPattern") [420,421,422]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [423,424,425]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [426,427,428]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [429,430,431]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [432,433,434,435]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [436,437,438,439,440]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [441,442]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [443,444,445,446]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [447,448]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [449,450,451]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [452,453,454]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 420,Var 452],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 421,Var 453]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 422,Var 454]]),Branch (Pattern ("Curry.Types","LazyPattern") [455,456]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [457,458,459,460]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [461,462,463,464,465]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","LazyPattern") [466,467]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [468,469,470]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [471,472,473]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [474,475,476]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [477,478,479,480]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [481,482,483,484,485]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [486,487]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [488,489,490,491]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [492,493]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [494,495,496]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [497,498,499]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [500,501]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 466,Var 500],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 467,Var 501]]),Branch (Pattern ("Curry.Types","FunctionPattern") [502,503,504,505]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [506,507,508,509,510]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","FunctionPattern") [511,512,513,514]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [515,516,517]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [518,519,520]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [521,522,523]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [524,525,526,527]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [528,529,530,531,532]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [533,534]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [535,536,537,538]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [539,540]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [541,542,543]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [544,545,546]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [547,548]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [549,550,551,552]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 511,Var 549],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 512],Var 550]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 513,Var 551]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") [Var 1],Var 514,Var 552]]),Branch (Pattern ("Curry.Types","InfixFuncPattern") [553,554,555,556,557]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","InfixFuncPattern") [558,559,560,561,562]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [563,564,565]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativePattern") [566,567,568]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","VariablePattern") [569,570,571]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ConstructorPattern") [572,573,574,575]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixPattern") [576,577,578,579,580]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ParenPattern") [581,582]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordPattern") [583,584,585,586]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","TuplePattern") [587,588]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListPattern") [589,590,591]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","AsPattern") [592,593,594]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LazyPattern") [595,596]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionPattern") [597,598,599,600]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixFuncPattern") [601,602,603,604,605]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 558,Var 601],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 559],Var 602]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 560,Var 603]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 561,Var 604]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 562,Var 605]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Pattern") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Pattern") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121") [Var 1]],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142") [Var 1]],Var 3]]]]]]]]]]]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 30,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 32,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 33) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933._#lambda937") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [34,35]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933._#lambda937") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933._#lambda937._#lambda941") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933._#lambda937._#lambda941") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933._#lambda937._#lambda941._#lambda945") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933._#lambda937._#lambda941._#lambda945") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","LiteralPattern") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'N')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'v')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 30,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 32,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 34,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 35) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950._#lambda954") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [36,37]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950._#lambda954") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950._#lambda954._#lambda958") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950._#lambda954._#lambda958") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950._#lambda954._#lambda958._#lambda962") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950._#lambda954._#lambda958._#lambda962") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","NegativePattern") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'V')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'b')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 30,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 32,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 34,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 35) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967._#lambda971") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [36,37]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967._#lambda971") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967._#lambda971._#lambda975") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967._#lambda971._#lambda975") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967._#lambda971._#lambda975._#lambda979") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967._#lambda971._#lambda975._#lambda979") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","VariablePattern") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 30,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 32,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 34,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 35) [Branch (Pattern ("Prelude",":") [36,37]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 36,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 37) [Branch (Pattern ("Prelude",":") [38,39]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 38,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 39) [Branch (Pattern ("Prelude",":") [40,41]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 40,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 41) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [42,43]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988._#lambda992") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988._#lambda992") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988._#lambda992._#lambda996") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988._#lambda992._#lambda996") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988._#lambda992._#lambda996._#lambda1000") [Var 6,Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") [Var 3],Lit (Intc 11)],Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988._#lambda992._#lambda996._#lambda1000") 5 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ConstructorPattern") [Var 2,Var 3,Var 1,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [30,31]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013._#lambda1017") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013._#lambda1017") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013._#lambda1017._#lambda1021") [Var 1,Var 2,Var 6,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013._#lambda1017._#lambda1021") 6 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013._#lambda1017._#lambda1021._#lambda1025") [Var 7,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 4,Lit (Intc 11),Var 8]],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013._#lambda1017._#lambda1021._#lambda1025") 6 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","InfixPattern") [Var 2,Var 3,Var 4,Var 1,Var 7],Var 8],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027._#lambda1030") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027._#lambda1030") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027._#lambda1030._#lambda1034") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [30,31]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027._#lambda1030._#lambda1034") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027._#lambda1030._#lambda1034._#lambda1038") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027._#lambda1030._#lambda1034._#lambda1038") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ParenPattern") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 30,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 31) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [32,33]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047._#lambda1051") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047._#lambda1051") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047._#lambda1051._#lambda1055") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047._#lambda1051._#lambda1055") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047._#lambda1051._#lambda1055._#lambda1059") [Var 6,Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Field") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") [Var 3]],Lit (Intc 11)],Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047._#lambda1051._#lambda1055._#lambda1059") 5 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Pattern") [TVar 0]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","RecordPattern") [Var 2,Var 3,Var 1,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061._#lambda1064") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061._#lambda1064") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061._#lambda1064._#lambda1068") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [30,31]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061._#lambda1064._#lambda1068") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061._#lambda1064._#lambda1068._#lambda1072") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061._#lambda1064._#lambda1068._#lambda1072") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","TuplePattern") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077._#lambda1081") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [28,29]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077._#lambda1081") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077._#lambda1081._#lambda1085") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077._#lambda1081._#lambda1085") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077._#lambda1081._#lambda1085._#lambda1089") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") [Var 2],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077._#lambda1081._#lambda1085._#lambda1089") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ListPattern") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094._#lambda1098") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [24,25]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094._#lambda1098") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094._#lambda1098._#lambda1102") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094._#lambda1098._#lambda1102") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094._#lambda1098._#lambda1102._#lambda1106") [Var 5,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094._#lambda1098._#lambda1102._#lambda1106") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","AsPattern") [Var 2,Var 1,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108._#lambda1111") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108._#lambda1111") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'z')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108._#lambda1111._#lambda1115") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [28,29]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108._#lambda1111._#lambda1115") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108._#lambda1111._#lambda1115._#lambda1119") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108._#lambda1111._#lambda1115._#lambda1119") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","LazyPattern") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 30,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 32,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 34,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 35) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [36,37]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128._#lambda1132") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128._#lambda1132") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128._#lambda1132._#lambda1136") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128._#lambda1132._#lambda1136") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128._#lambda1132._#lambda1136._#lambda1140") [Var 6,Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") [Var 3],Lit (Intc 11)],Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128._#lambda1132._#lambda1136._#lambda1140") 5 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","FunctionPattern") [Var 2,Var 3,Var 1,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 30,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 32,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 33) [Branch (Pattern ("Prelude",":") [34,35]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 34,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 35) [Branch (Pattern ("Prelude",":") [36,37]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 36,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 37) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [38,39]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153._#lambda1157") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153._#lambda1157") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153._#lambda1157._#lambda1161") [Var 1,Var 2,Var 6,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153._#lambda1157._#lambda1161") 6 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153._#lambda1157._#lambda1161._#lambda1165") [Var 7,Var 1,Var 2,Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 4,Lit (Intc 11),Var 8]],Var 6])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153._#lambda1157._#lambda1161._#lambda1165") 6 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [1,2,3,4,5,6] (Case Rigid (Var 5) [Branch (Pattern ("Prelude","(,)") [7,8]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","InfixFuncPattern") [Var 2,Var 3,Var 4,Var 1,Var 7],Var 8],Var 6])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Pattern") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Pattern") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Pattern") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","LiteralPattern") [4,5,6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Literal") [Lit (Intc 11),Var 6]]]]]]]),Branch (Pattern ("Curry.Types","NegativePattern") [7,8,9]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 7],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Literal") [Lit (Intc 11),Var 9]]]]]]]),Branch (Pattern ("Curry.Types","VariablePattern") [10,11,12]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'V'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 10],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 11],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 12]]]]]]]),Branch (Pattern ("Curry.Types","ConstructorPattern") [13,14,15,16]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 13],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 14],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 15],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") [Var 1],Lit (Intc 11)],Var 16]]]]]]]]]),Branch (Pattern ("Curry.Types","InfixPattern") [17,18,19,20,21]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 17],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 18],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 19],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 20],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 21]]]]]]]]]]]),Branch (Pattern ("Curry.Types","ParenPattern") [22,23]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 22],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 23]]]]]),Branch (Pattern ("Curry.Types","RecordPattern") [24,25,26,27]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 24],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 25],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 26],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Field") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") [Var 1]],Lit (Intc 11)],Var 27]]]]]]]]]),Branch (Pattern ("Curry.Types","TuplePattern") [28,29]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 28],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") [Var 1],Lit (Intc 11)],Var 29]]]]]),Branch (Pattern ("Curry.Types","ListPattern") [30,31,32]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 30],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 31],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") [Var 1],Lit (Intc 11)],Var 32]]]]]]]),Branch (Pattern ("Curry.Types","AsPattern") [33,34,35]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 33],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 34],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 35]]]]]]]),Branch (Pattern ("Curry.Types","LazyPattern") [36,37]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'z'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 36],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 37]]]]]),Branch (Pattern ("Curry.Types","FunctionPattern") [38,39,40,41]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 38],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 39],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 40],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") [Var 1],Lit (Intc 11)],Var 41]]]]]]]]]),Branch (Pattern ("Curry.Types","InfixFuncPattern") [42,43,44,45,46]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 42],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 43],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 44],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 45],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 46]]]]]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Expression") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Expression") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Literal") [4,5,6]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [7,8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 7],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 5],Var 8]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Literal") [Var 6,Var 9]]),Branch (Pattern ("Curry.Types","Variable") [10,11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [13,14,15]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [16,17]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [18,19,20]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [21,22,23,24]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [25,26,27]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [28,29]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [30,31,32]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [33,34,35]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [36,37]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [38,39,40]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [41,42,43]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [44,45,46,47]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [48,49]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [50,51,52]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [53,54,55,56]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [57,58,59]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [60,61,62]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [63,64,65]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [66,67,68]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [69,70,71]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [72,73,74,75]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [76,77,78,79]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Variable") [80,81,82]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [83,84,85]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [86,87,88]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 80,Var 86],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 81],Var 87]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 82,Var 88]]),Branch (Pattern ("Curry.Types","Constructor") [89,90,91]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [92,93]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [94,95,96]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [97,98,99,100]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [101,102,103]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [104,105]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [106,107,108]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [109,110,111]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [112,113]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [114,115,116]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [117,118,119]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [120,121,122,123]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [124,125]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [126,127,128]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [129,130,131,132]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [133,134,135]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [136,137,138]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [139,140,141]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [142,143,144]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [145,146,147]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [148,149,150,151]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [152,153,154,155]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Constructor") [156,157,158]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [159,160,161]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [162,163,164]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [165,166,167]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 156,Var 165],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 157],Var 166]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 158,Var 167]]),Branch (Pattern ("Curry.Types","Paren") [168,169]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [170,171,172]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [173,174,175,176]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [177,178,179]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [180,181]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [182,183,184]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [185,186,187]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [188,189]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [190,191,192]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [193,194,195]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [196,197,198,199]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [200,201]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [202,203,204]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [205,206,207,208]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [209,210,211]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [212,213,214]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [215,216,217]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [218,219,220]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [221,222,223]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [224,225,226,227]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [228,229,230,231]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Paren") [232,233]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [234,235,236]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [237,238,239]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [240,241,242]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [243,244]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 232,Var 243],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 233,Var 244]]),Branch (Pattern ("Curry.Types","Typed") [245,246,247]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [248,249,250,251]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [252,253,254]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [255,256]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [257,258,259]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [260,261,262]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [263,264]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [265,266,267]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [268,269,270]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [271,272,273,274]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [275,276]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [277,278,279]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [280,281,282,283]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [284,285,286]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [287,288,289]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [290,291,292]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [293,294,295]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [296,297,298]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [299,300,301,302]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [303,304,305,306]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Typed") [307,308,309]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [310,311,312]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [313,314,315]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [316,317,318]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [319,320]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [321,322,323]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 307,Var 321],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 308,Var 322]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.QualTypeExpr") [Var 309,Var 323]]),Branch (Pattern ("Curry.Types","Record") [324,325,326,327]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [328,329,330]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [331,332]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [333,334,335]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [336,337,338]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [339,340]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [341,342,343]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [344,345,346]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [347,348,349,350]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [351,352]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [353,354,355]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [356,357,358,359]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [360,361,362]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [363,364,365]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [366,367,368]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [369,370,371]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [372,373,374]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [375,376,377,378]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [379,380,381,382]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Record") [383,384,385,386]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [387,388,389]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [390,391,392]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [393,394,395]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [396,397]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [398,399,400]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [401,402,403,404]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 383,Var 401],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 384],Var 402]],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 385,Var 403]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Field") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Expression") [Var 1]],Var 386,Var 404]]),Branch (Pattern ("Curry.Types","RecordUpdate") [405,406,407]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [408,409]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [410,411,412]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [413,414,415]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [416,417]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [418,419,420]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [421,422,423]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [424,425,426,427]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [428,429]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [430,431,432]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [433,434,435,436]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [437,438,439]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [440,441,442]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [443,444,445]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [446,447,448]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [449,450,451]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [452,453,454,455]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [456,457,458,459]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","RecordUpdate") [460,461,462]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [463,464,465]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [466,467,468]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [469,470,471]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [472,473]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [474,475,476]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [477,478,479,480]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [481,482,483]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 460,Var 481],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 461,Var 482]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Field") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Expression") [Var 1]],Var 462,Var 483]]),Branch (Pattern ("Curry.Types","Tuple") [484,485]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [486,487,488]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [489,490,491]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [492,493]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [494,495,496]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [497,498,499]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [500,501,502,503]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [504,505]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [506,507,508]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [509,510,511,512]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [513,514,515]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [516,517,518]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [519,520,521]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [522,523,524]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [525,526,527]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [528,529,530,531]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [532,533,534,535]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Tuple") [536,537]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [538,539,540]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [541,542,543]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [544,545,546]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [547,548]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [549,550,551]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [552,553,554,555]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [556,557,558]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [559,560]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 536,Var 559],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Expression") [Var 1],Var 537,Var 560]]),Branch (Pattern ("Curry.Types","List") [561,562,563]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [564,565,566]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [567,568]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [569,570,571]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [572,573,574]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [575,576,577,578]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [579,580]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [581,582,583]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [584,585,586,587]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [588,589,590]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [591,592,593]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [594,595,596]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [597,598,599]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [600,601,602]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [603,604,605,606]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [607,608,609,610]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","List") [611,612,613]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [614,615,616]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [617,618,619]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [620,621,622]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [623,624]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [625,626,627]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [628,629,630,631]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [632,633,634]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [635,636]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [637,638,639]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 611,Var 637],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 612],Var 638]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Expression") [Var 1],Var 613,Var 639]]),Branch (Pattern ("Curry.Types","ListCompr") [640,641,642]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [643,644]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [645,646,647]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [648,649,650]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [651,652,653,654]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [655,656]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [657,658,659]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [660,661,662,663]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [664,665,666]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [667,668,669]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [670,671,672]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [673,674,675]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [676,677,678]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [679,680,681,682]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [683,684,685,686]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ListCompr") [687,688,689]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [690,691,692]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [693,694,695]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [696,697,698]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [699,700]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [701,702,703]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [704,705,706,707]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [708,709,710]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [711,712]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [713,714,715]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [716,717,718]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 687,Var 716],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 688,Var 717]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Statement") [Var 1],Var 689,Var 718]]),Branch (Pattern ("Curry.Types","EnumFrom") [719,720]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [721,722,723]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [724,725,726]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [727,728,729,730]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [731,732]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [733,734,735]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [736,737,738,739]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [740,741,742]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [743,744,745]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [746,747,748]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [749,750,751]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [752,753,754]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [755,756,757,758]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [759,760,761,762]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","EnumFrom") [763,764]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [765,766,767]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [768,769,770]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [771,772,773]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [774,775]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [776,777,778]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [779,780,781,782]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [783,784,785]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [786,787]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [788,789,790]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [791,792,793]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [794,795]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 763,Var 794],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 764,Var 795]]),Branch (Pattern ("Curry.Types","EnumFromThen") [796,797,798]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [799,800,801]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [802,803,804,805]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [806,807]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [808,809,810]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [811,812,813,814]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [815,816,817]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [818,819,820]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [821,822,823]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [824,825,826]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [827,828,829]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [830,831,832,833]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [834,835,836,837]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","EnumFromThen") [838,839,840]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [841,842,843]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [844,845,846]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [847,848,849]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [850,851]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [852,853,854]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [855,856,857,858]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [859,860,861]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [862,863]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [864,865,866]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [867,868,869]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [870,871]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [872,873,874]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 838,Var 872],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 839,Var 873]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 840,Var 874]]),Branch (Pattern ("Curry.Types","EnumFromTo") [875,876,877]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [878,879,880,881]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [882,883]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [884,885,886]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [887,888,889,890]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [891,892,893]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [894,895,896]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [897,898,899]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [900,901,902]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [903,904,905]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [906,907,908,909]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [910,911,912,913]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","EnumFromTo") [914,915,916]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [917,918,919]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [920,921,922]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [923,924,925]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [926,927]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [928,929,930]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [931,932,933,934]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [935,936,937]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [938,939]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [940,941,942]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [943,944,945]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [946,947]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [948,949,950]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [951,952,953]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 914,Var 951],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 915,Var 952]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 916,Var 953]]),Branch (Pattern ("Curry.Types","EnumFromThenTo") [954,955,956,957]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [958,959]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [960,961,962]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [963,964,965,966]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [967,968,969]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [970,971,972]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [973,974,975]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [976,977,978]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [979,980,981]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [982,983,984,985]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [986,987,988,989]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","EnumFromThenTo") [990,991,992,993]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [994,995,996]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [997,998,999]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1000,1001,1002]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1003,1004]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1005,1006,1007]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1008,1009,1010,1011]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1012,1013,1014]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1015,1016]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1017,1018,1019]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1020,1021,1022]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1023,1024]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1025,1026,1027]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1028,1029,1030]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1031,1032,1033,1034]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 990,Var 1031],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 991,Var 1032]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 992,Var 1033]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 993,Var 1034]]),Branch (Pattern ("Curry.Types","UnaryMinus") [1035,1036]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [1037,1038,1039]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [1040,1041,1042,1043]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [1044,1045,1046]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [1047,1048,1049]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [1050,1051,1052]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [1053,1054,1055]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [1056,1057,1058]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [1059,1060,1061,1062]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [1063,1064,1065,1066]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","UnaryMinus") [1067,1068]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [1069,1070,1071]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [1072,1073,1074]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1075,1076,1077]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1078,1079]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1080,1081,1082]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1083,1084,1085,1086]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1087,1088,1089]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1090,1091]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1092,1093,1094]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1095,1096,1097]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1098,1099]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1100,1101,1102]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1103,1104,1105]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1106,1107,1108,1109]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [1110,1111]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 1067,Var 1110],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1068,Var 1111]]),Branch (Pattern ("Curry.Types","Apply") [1112,1113,1114]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [1115,1116,1117,1118]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [1119,1120,1121]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [1122,1123,1124]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [1125,1126,1127]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [1128,1129,1130]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [1131,1132,1133]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [1134,1135,1136,1137]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [1138,1139,1140,1141]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Apply") [1142,1143,1144]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [1145,1146,1147]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [1148,1149,1150]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1151,1152,1153]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1154,1155]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1156,1157,1158]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1159,1160,1161,1162]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1163,1164,1165]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1166,1167]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1168,1169,1170]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1171,1172,1173]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1174,1175]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1176,1177,1178]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1179,1180,1181]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1182,1183,1184,1185]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [1186,1187]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [1188,1189,1190]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 1142,Var 1188],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1143,Var 1189]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1144,Var 1190]]),Branch (Pattern ("Curry.Types","InfixApply") [1191,1192,1193,1194]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [1195,1196,1197]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [1198,1199,1200]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [1201,1202,1203]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [1204,1205,1206]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [1207,1208,1209]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [1210,1211,1212,1213]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [1214,1215,1216,1217]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","InfixApply") [1218,1219,1220,1221]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [1222,1223,1224]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [1225,1226,1227]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1228,1229,1230]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1231,1232]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1233,1234,1235]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1236,1237,1238,1239]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1240,1241,1242]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1243,1244]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1245,1246,1247]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1248,1249,1250]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1251,1252]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1253,1254,1255]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1256,1257,1258]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1259,1260,1261,1262]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [1263,1264]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [1265,1266,1267]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [1268,1269,1270,1271]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 1218,Var 1268],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1219,Var 1269]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.InfixOp") [Var 1,Var 1220,Var 1270]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1221,Var 1271]]),Branch (Pattern ("Curry.Types","LeftSection") [1272,1273,1274]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [1275,1276,1277]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [1278,1279,1280]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [1281,1282,1283]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [1284,1285,1286]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [1287,1288,1289,1290]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [1291,1292,1293,1294]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","LeftSection") [1295,1296,1297]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [1298,1299,1300]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [1301,1302,1303]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1304,1305,1306]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1307,1308]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1309,1310,1311]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1312,1313,1314,1315]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1316,1317,1318]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1319,1320]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1321,1322,1323]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1324,1325,1326]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1327,1328]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1329,1330,1331]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1332,1333,1334]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1335,1336,1337,1338]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [1339,1340]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [1341,1342,1343]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [1344,1345,1346,1347]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [1348,1349,1350]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 1295,Var 1348],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1296,Var 1349]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.InfixOp") [Var 1,Var 1297,Var 1350]]),Branch (Pattern ("Curry.Types","RightSection") [1351,1352,1353]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [1354,1355,1356]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [1357,1358,1359]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [1360,1361,1362]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [1363,1364,1365,1366]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [1367,1368,1369,1370]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","RightSection") [1371,1372,1373]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [1374,1375,1376]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [1377,1378,1379]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1380,1381,1382]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1383,1384]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1385,1386,1387]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1388,1389,1390,1391]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1392,1393,1394]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1395,1396]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1397,1398,1399]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1400,1401,1402]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1403,1404]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1405,1406,1407]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1408,1409,1410]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1411,1412,1413,1414]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [1415,1416]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [1417,1418,1419]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [1420,1421,1422,1423]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [1424,1425,1426]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [1427,1428,1429]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 1371,Var 1427],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.InfixOp") [Var 1,Var 1372,Var 1428]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1373,Var 1429]]),Branch (Pattern ("Curry.Types","Lambda") [1430,1431,1432]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [1433,1434,1435]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [1436,1437,1438]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [1439,1440,1441,1442]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [1443,1444,1445,1446]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Lambda") [1447,1448,1449]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [1450,1451,1452]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [1453,1454,1455]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1456,1457,1458]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1459,1460]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1461,1462,1463]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1464,1465,1466,1467]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1468,1469,1470]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1471,1472]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1473,1474,1475]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1476,1477,1478]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1479,1480]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1481,1482,1483]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1484,1485,1486]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1487,1488,1489,1490]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [1491,1492]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [1493,1494,1495]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [1496,1497,1498,1499]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [1500,1501,1502]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [1503,1504,1505]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [1506,1507,1508]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 1447,Var 1506],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") [Var 1],Var 1448,Var 1507]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1449,Var 1508]]),Branch (Pattern ("Curry.Types","Let") [1509,1510,1511]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [1512,1513,1514]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [1515,1516,1517,1518]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [1519,1520,1521,1522]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Let") [1523,1524,1525]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [1526,1527,1528]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [1529,1530,1531]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1532,1533,1534]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1535,1536]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1537,1538,1539]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1540,1541,1542,1543]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1544,1545,1546]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1547,1548]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1549,1550,1551]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1552,1553,1554]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1555,1556]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1557,1558,1559]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1560,1561,1562]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1563,1564,1565,1566]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [1567,1568]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [1569,1570,1571]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [1572,1573,1574,1575]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [1576,1577,1578]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [1579,1580,1581]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [1582,1583,1584]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [1585,1586,1587]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 1523,Var 1585],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Decl") [Var 1],Var 1524,Var 1586]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1525,Var 1587]]),Branch (Pattern ("Curry.Types","Do") [1588,1589,1590]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [1591,1592,1593,1594]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [1595,1596,1597,1598]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Do") [1599,1600,1601]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [1602,1603,1604]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [1605,1606,1607]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1608,1609,1610]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1611,1612]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1613,1614,1615]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1616,1617,1618,1619]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1620,1621,1622]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1623,1624]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1625,1626,1627]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1628,1629,1630]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1631,1632]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1633,1634,1635]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1636,1637,1638]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1639,1640,1641,1642]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [1643,1644]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [1645,1646,1647]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [1648,1649,1650,1651]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [1652,1653,1654]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [1655,1656,1657]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [1658,1659,1660]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [1661,1662,1663]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [1664,1665,1666]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 1599,Var 1664],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Statement") [Var 1],Var 1600,Var 1665]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1601,Var 1666]]),Branch (Pattern ("Curry.Types","IfThenElse") [1667,1668,1669,1670]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [1671,1672,1673,1674]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","IfThenElse") [1675,1676,1677,1678]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [1679,1680,1681]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [1682,1683,1684]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1685,1686,1687]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1688,1689]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1690,1691,1692]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1693,1694,1695,1696]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1697,1698,1699]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1700,1701]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1702,1703,1704]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1705,1706,1707]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1708,1709]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1710,1711,1712]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1713,1714,1715]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1716,1717,1718,1719]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [1720,1721]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [1722,1723,1724]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [1725,1726,1727,1728]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [1729,1730,1731]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [1732,1733,1734]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [1735,1736,1737]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [1738,1739,1740]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [1741,1742,1743]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [1744,1745,1746,1747]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 1675,Var 1744],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1676,Var 1745]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1677,Var 1746]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1678,Var 1747]]),Branch (Pattern ("Curry.Types","Case") [1748,1749,1750,1751]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Case") [1752,1753,1754,1755]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [1756,1757,1758]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Variable") [1759,1760,1761]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Constructor") [1762,1763,1764]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Paren") [1765,1766]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Typed") [1767,1768,1769]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Record") [1770,1771,1772,1773]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RecordUpdate") [1774,1775,1776]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Tuple") [1777,1778]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","List") [1779,1780,1781]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ListCompr") [1782,1783,1784]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFrom") [1785,1786]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThen") [1787,1788,1789]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromTo") [1790,1791,1792]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","EnumFromThenTo") [1793,1794,1795,1796]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnaryMinus") [1797,1798]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Apply") [1799,1800,1801]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixApply") [1802,1803,1804,1805]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","LeftSection") [1806,1807,1808]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","RightSection") [1809,1810,1811]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Lambda") [1812,1813,1814]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Let") [1815,1816,1817]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Do") [1818,1819,1820]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","IfThenElse") [1821,1822,1823,1824]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Case") [1825,1826,1827,1828]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 1752,Var 1825],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.CaseType") [Var 1753,Var 1826]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 1754,Var 1827]],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Alt") [Var 1],Var 1755,Var 1828]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Expression") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Expression") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Expression") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537") [Var 1]],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558") [Var 1]],Var 3]]]]]]]]]]]]]]]]]]]]]]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170._#lambda1174") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [20,21]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170._#lambda1174") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170._#lambda1174._#lambda1178") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170._#lambda1174._#lambda1178") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170._#lambda1174._#lambda1178._#lambda1182") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170._#lambda1174._#lambda1178._#lambda1182") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Literal") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'V')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'b')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187._#lambda1191") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [22,23]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187._#lambda1191") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187._#lambda1191._#lambda1195") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187._#lambda1191._#lambda1195") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187._#lambda1191._#lambda1195._#lambda1199") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187._#lambda1191._#lambda1195._#lambda1199") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Variable") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204._#lambda1208") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [28,29]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204._#lambda1208") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204._#lambda1208._#lambda1212") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204._#lambda1208._#lambda1212") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204._#lambda1208._#lambda1212._#lambda1216") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204._#lambda1208._#lambda1212._#lambda1216") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Constructor") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218._#lambda1221") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218._#lambda1221") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218._#lambda1221._#lambda1225") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [16,17]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218._#lambda1221._#lambda1225") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218._#lambda1221._#lambda1225._#lambda1229") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218._#lambda1221._#lambda1225._#lambda1229") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Paren") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234._#lambda1238") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [16,17]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234._#lambda1238") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234._#lambda1238._#lambda1242") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234._#lambda1238._#lambda1242") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234._#lambda1238._#lambda1242._#lambda1246") [Var 1,Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234._#lambda1238._#lambda1242._#lambda1246") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Typed") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [18,19]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255._#lambda1259") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255._#lambda1259") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255._#lambda1259._#lambda1263") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255._#lambda1259._#lambda1263") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255._#lambda1259._#lambda1263._#lambda1267") [Var 6,Var 1,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Field") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Expression") [Var 3]],Lit (Intc 11)],Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255._#lambda1259._#lambda1263._#lambda1267") 5 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Expression") [TVar 0]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Record") [Var 2,Var 3,Var 1,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'U')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272._#lambda1276") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [30,31]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272._#lambda1276") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272._#lambda1276._#lambda1280") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272._#lambda1276._#lambda1280") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272._#lambda1276._#lambda1280._#lambda1284") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Field") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Expression") [Var 2]],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272._#lambda1276._#lambda1280._#lambda1284") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Expression") [TVar 0]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","RecordUpdate") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286._#lambda1289") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286._#lambda1289") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286._#lambda1289._#lambda1293") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [16,17]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286._#lambda1289._#lambda1293") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286._#lambda1289._#lambda1293._#lambda1297") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Expression") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286._#lambda1289._#lambda1293._#lambda1297") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Tuple") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302._#lambda1306") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [14,15]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302._#lambda1306") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302._#lambda1306._#lambda1310") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302._#lambda1306._#lambda1310") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302._#lambda1306._#lambda1310._#lambda1314") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Expression") [Var 2],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302._#lambda1306._#lambda1310._#lambda1314") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","List") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319._#lambda1323") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [24,25]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319._#lambda1323") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319._#lambda1323._#lambda1327") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319._#lambda1323._#lambda1327") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319._#lambda1323._#lambda1327._#lambda1331") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Statement") [Var 2],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319._#lambda1323._#lambda1327._#lambda1331") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ListCompr") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333._#lambda1336") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333._#lambda1336") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333._#lambda1336._#lambda1340") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [22,23]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333._#lambda1336._#lambda1340") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333._#lambda1336._#lambda1340._#lambda1344") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333._#lambda1336._#lambda1340._#lambda1344") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","EnumFrom") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349._#lambda1353") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [30,31]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349._#lambda1353") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349._#lambda1353._#lambda1357") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349._#lambda1353._#lambda1357") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349._#lambda1353._#lambda1357._#lambda1361") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349._#lambda1353._#lambda1357._#lambda1361") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","EnumFromThen") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366._#lambda1370") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [26,27]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366._#lambda1370") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366._#lambda1370._#lambda1374") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366._#lambda1370._#lambda1374") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366._#lambda1370._#lambda1374._#lambda1378") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366._#lambda1370._#lambda1374._#lambda1378") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","EnumFromTo") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude",":") [30,31]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 30,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 31) [Branch (Pattern ("Prelude",":") [32,33]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 32,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 33) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [34,35]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387._#lambda1391") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387._#lambda1391") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387._#lambda1391._#lambda1395") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387._#lambda1391._#lambda1395") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387._#lambda1391._#lambda1395._#lambda1399") [Var 1,Var 2,Var 6],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 3,Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387._#lambda1391._#lambda1395._#lambda1399") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","EnumFromThenTo") [Var 1,Var 2,Var 3,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401._#lambda1404") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401._#lambda1404") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'U')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'M')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401._#lambda1404._#lambda1408") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [26,27]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401._#lambda1404._#lambda1408") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401._#lambda1404._#lambda1408._#lambda1412") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401._#lambda1404._#lambda1408._#lambda1412") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","UnaryMinus") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417._#lambda1421") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [16,17]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417._#lambda1421") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417._#lambda1421._#lambda1425") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417._#lambda1421._#lambda1425") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417._#lambda1421._#lambda1425._#lambda1429") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417._#lambda1421._#lambda1425._#lambda1429") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Apply") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [26,27]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438._#lambda1442") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438._#lambda1442") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438._#lambda1442._#lambda1446") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438._#lambda1442._#lambda1446") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438._#lambda1442._#lambda1446._#lambda1450") [Var 1,Var 2,Var 6],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 3,Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438._#lambda1442._#lambda1446._#lambda1450") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","InfixApply") [Var 1,Var 2,Var 3,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'S')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455._#lambda1459") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [28,29]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455._#lambda1459") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455._#lambda1459._#lambda1463") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455._#lambda1459._#lambda1463") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455._#lambda1459._#lambda1463._#lambda1467") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455._#lambda1459._#lambda1463._#lambda1467") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","LeftSection") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'S')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude",":") [28,29]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 28,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 29) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472._#lambda1476") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [30,31]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472._#lambda1476") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472._#lambda1476._#lambda1480") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472._#lambda1476._#lambda1480") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472._#lambda1476._#lambda1480._#lambda1484") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472._#lambda1476._#lambda1480._#lambda1484") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","RightSection") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'b')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489._#lambda1493") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [18,19]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489._#lambda1493") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489._#lambda1493._#lambda1497") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489._#lambda1493._#lambda1497") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489._#lambda1493._#lambda1497._#lambda1501") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489._#lambda1493._#lambda1497._#lambda1501") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Lambda") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506._#lambda1510") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [12,13]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506._#lambda1510") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506._#lambda1510._#lambda1514") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Decl") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506._#lambda1510._#lambda1514") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506._#lambda1510._#lambda1514._#lambda1518") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506._#lambda1510._#lambda1514._#lambda1518") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Let") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523._#lambda1527") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [10,11]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523._#lambda1527") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523._#lambda1527._#lambda1531") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Statement") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523._#lambda1527._#lambda1531") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523._#lambda1527._#lambda1531._#lambda1535") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523._#lambda1527._#lambda1531._#lambda1535") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Do") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'h')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [26,27]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544._#lambda1548") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544._#lambda1548") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544._#lambda1548._#lambda1552") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544._#lambda1548._#lambda1552") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544._#lambda1548._#lambda1552._#lambda1556") [Var 1,Var 2,Var 6],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 3,Lit (Intc 11),Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544._#lambda1548._#lambda1552._#lambda1556") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","IfThenElse") [Var 1,Var 2,Var 3,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [14,15]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565._#lambda1569") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565._#lambda1569") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565._#lambda1569._#lambda1573") [Var 1,Var 5,Var 2],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565._#lambda1569._#lambda1573") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","CaseType") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565._#lambda1569._#lambda1573._#lambda1577") [Var 1,Var 2,Var 6],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Alt") [Var 3],Lit (Intc 11)],Var 7]],Var 5])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565._#lambda1569._#lambda1573._#lambda1577") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","CaseType") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Alt") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [1,2,3,4,5] (Case Rigid (Var 4) [Branch (Pattern ("Prelude","(,)") [6,7]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Case") [Var 1,Var 2,Var 3,Var 6],Var 7],Var 5])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Expression") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Expression") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Expression") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Expression") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Expression") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Literal") [4,5,6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Literal") [Lit (Intc 11),Var 6]]]]]]]),Branch (Pattern ("Curry.Types","Variable") [7,8,9]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'V'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 7],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 9]]]]]]]),Branch (Pattern ("Curry.Types","Constructor") [10,11,12]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 10],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 11],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 12]]]]]]]),Branch (Pattern ("Curry.Types","Paren") [13,14]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 13],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 14]]]]]),Branch (Pattern ("Curry.Types","Typed") [15,16,17]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 15],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 16],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.QualTypeExpr") [Lit (Intc 11),Var 17]]]]]]]),Branch (Pattern ("Curry.Types","Record") [18,19,20,21]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 18],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 19],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 20],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Field") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Expression") [Var 1]],Lit (Intc 11)],Var 21]]]]]]]]]),Branch (Pattern ("Curry.Types","RecordUpdate") [22,23,24]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 22],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 23],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Field") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Expression") [Var 1]],Lit (Intc 11)],Var 24]]]]]]]),Branch (Pattern ("Curry.Types","Tuple") [25,26]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 25],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Expression") [Var 1],Lit (Intc 11)],Var 26]]]]]),Branch (Pattern ("Curry.Types","List") [27,28,29]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 27],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 28],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Expression") [Var 1],Lit (Intc 11)],Var 29]]]]]]]),Branch (Pattern ("Curry.Types","ListCompr") [30,31,32]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 30],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 31],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Statement") [Var 1],Lit (Intc 11)],Var 32]]]]]]]),Branch (Pattern ("Curry.Types","EnumFrom") [33,34]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 33],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 34]]]]]),Branch (Pattern ("Curry.Types","EnumFromThen") [35,36,37]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 35],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 36],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 37]]]]]]]),Branch (Pattern ("Curry.Types","EnumFromTo") [38,39,40]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 38],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 39],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 40]]]]]]]),Branch (Pattern ("Curry.Types","EnumFromThenTo") [41,42,43,44]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 41],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 42],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 43],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 44]]]]]]]]]),Branch (Pattern ("Curry.Types","UnaryMinus") [45,46]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 45],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 46]]]]]),Branch (Pattern ("Curry.Types","Apply") [47,48,49]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 47],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 48],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 49]]]]]]]),Branch (Pattern ("Curry.Types","InfixApply") [50,51,52,53]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'y'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 50],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 51],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.InfixOp") [Var 1,Lit (Intc 11),Var 52],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 53]]]]]]]]]),Branch (Pattern ("Curry.Types","LeftSection") [54,55,56]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 54],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 55],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.InfixOp") [Var 1,Lit (Intc 11),Var 56]]]]]]]),Branch (Pattern ("Curry.Types","RightSection") [57,58,59]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 57],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.InfixOp") [Var 1,Lit (Intc 11),Var 58],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 59]]]]]]]),Branch (Pattern ("Curry.Types","Lambda") [60,61,62]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'b'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 60],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") [Var 1],Lit (Intc 11)],Var 61],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 62]]]]]]]),Branch (Pattern ("Curry.Types","Let") [63,64,65]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 63],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") [Var 1],Lit (Intc 11)],Var 64],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 65]]]]]]]),Branch (Pattern ("Curry.Types","Do") [66,67,68]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 66],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Statement") [Var 1],Lit (Intc 11)],Var 67],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 68]]]]]]]),Branch (Pattern ("Curry.Types","IfThenElse") [69,70,71,72]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'h'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 69],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 70],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 71],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 72]]]]]]]]]),Branch (Pattern ("Curry.Types","Case") [73,74,75,76]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 73],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.CaseType") [Lit (Intc 11),Var 74],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 75],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Alt") [Var 1],Lit (Intc 11)],Var 76]]]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Expression") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","InfixOp") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.InfixOp") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.InfixOp") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.InfixOp") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","InfixOp") [4,5]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixOp") [6,7]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 4],Var 6],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 5,Var 7]]),Branch (Pattern ("Curry.Types","InfixConstr") [8,9]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","InfixConstr") [10,11]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixOp") [12,13]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","InfixConstr") [14,15]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 10],Var 14],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 11,Var 15]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.InfixOp") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","InfixOp") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.InfixOp") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579") [Var 1]],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592") [Var 1]],Var 3]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579._#lambda1582") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579._#lambda1582") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'O')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579._#lambda1582._#lambda1586") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [20,21]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579._#lambda1582._#lambda1586") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579._#lambda1582._#lambda1586._#lambda1590") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579._#lambda1582._#lambda1586._#lambda1590") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","InfixOp") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592._#lambda1595") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592._#lambda1595") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude",":") [22,23]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 22,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 23) [Branch (Pattern ("Prelude",":") [24,25]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 24,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 25) [Branch (Pattern ("Prelude",":") [26,27]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 26,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 27) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592._#lambda1595._#lambda1599") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [28,29]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592._#lambda1595._#lambda1599") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592._#lambda1595._#lambda1599._#lambda1603") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592._#lambda1595._#lambda1599._#lambda1603") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","InfixConstr") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","InfixOp") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.InfixOp") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","InfixOp") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.InfixOp") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.InfixOp") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.InfixOp") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.InfixOp") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.InfixOp") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","InfixOp") [4,5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 5]]]]]),Branch (Pattern ("Curry.Types","InfixConstr") [6,7]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 7]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","InfixOp") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.InfixOp") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Statement") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Statement") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Statement") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Statement") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","StmtExpr") [4,5]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","StmtExpr") [6,7]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 6],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 5,Var 7]]),Branch (Pattern ("Curry.Types","StmtDecl") [8,9]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","StmtBind") [10,11,12]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","StmtDecl") [13,14]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","StmtExpr") [15,16]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","StmtDecl") [17,18]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 13,Var 17],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Decl") [Var 1],Var 14,Var 18]]),Branch (Pattern ("Curry.Types","StmtBind") [19,20,21]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","StmtBind") [22,23,24]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","StmtExpr") [25,26]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","StmtDecl") [27,28]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","StmtBind") [29,30,31]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 22,Var 29],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 23,Var 30]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") [Var 1,Var 24,Var 31]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Statement") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Statement") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Statement") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605") [Var 1]],Var 3],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618") [Var 1]],Var 3],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631") [Var 1]],Var 3]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605._#lambda1608") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605._#lambda1608") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'S')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605._#lambda1608._#lambda1612") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [22,23]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605._#lambda1608._#lambda1612") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605._#lambda1608._#lambda1612._#lambda1616") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605._#lambda1608._#lambda1612._#lambda1616") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","StmtExpr") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618._#lambda1621") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618._#lambda1621") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'S')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618._#lambda1621._#lambda1625") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [22,23]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618._#lambda1621._#lambda1625") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618._#lambda1621._#lambda1625._#lambda1629") [Var 4],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Decl") [Var 1],Lit (Intc 11)],Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618._#lambda1621._#lambda1625._#lambda1629") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","StmtDecl") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'S')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'B')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude",":") [16,17]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 16,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 17) [Branch (Pattern ("Prelude",":") [18,19]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 18,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 19) [Branch (Pattern ("Prelude",":") [20,21]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 20,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 21) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634._#lambda1638") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [22,23]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634._#lambda1638") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634._#lambda1638._#lambda1642") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634._#lambda1638._#lambda1642") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634._#lambda1638._#lambda1642._#lambda1646") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634._#lambda1638._#lambda1642._#lambda1646") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","StmtBind") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Statement") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Statement") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Statement") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Statement") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Statement") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Statement") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Statement") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","StmtExpr") [4,5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 5]]]]]),Branch (Pattern ("Curry.Types","StmtDecl") [6,7]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 6],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") [Var 1],Lit (Intc 11)],Var 7]]]]]),Branch (Pattern ("Curry.Types","StmtBind") [8,9,10]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'B'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 8],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 9],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") [Var 1,Lit (Intc 11),Var 10]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Statement") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.CaseType") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","CaseType") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.CaseType") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.CaseType") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.CaseType") 2 Public (FuncType (TCons ("Curry.Types","CaseType") []) (FuncType (TCons ("Curry.Types","CaseType") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","Rigid") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Rigid") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","Flex") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","Flex") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Rigid") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","Flex") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.CaseType") 0 Public (FuncType (TCons ("Curry.Types","CaseType") []) (FuncType (TCons ("Curry.Types","CaseType") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.CaseType") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.CaseType") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","CaseType") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.CaseType") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1648") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1653") []],Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1648") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1648._#lambda1651") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1648._#lambda1651") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Rigid") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [15,16]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1653") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1653._#lambda1656") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1653._#lambda1656") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Flex") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [13,14]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.CaseType") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","CaseType") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.CaseType") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.CaseType") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","CaseType") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.CaseType") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.CaseType") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.CaseType") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.CaseType") 0 Public (FuncType (TCons ("Curry.Types","CaseType") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.CaseType") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.CaseType") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","CaseType") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Rigid") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Curry.Types","Flex") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude","[]") []]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.CaseType") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","CaseType") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.CaseType") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Alt") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Alt") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Alt") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Alt") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Alt") [4,5,6]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Alt") [7,8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 7],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") [Var 1,Var 5,Var 8]],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Rhs") [Var 1,Var 6,Var 9]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Alt") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Alt") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Alt") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658") [Var 1]],Var 3])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661._#lambda1665") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [12,13]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661._#lambda1665") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661._#lambda1665._#lambda1669") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661._#lambda1665._#lambda1669") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661._#lambda1665._#lambda1669._#lambda1673") [Var 1,Var 5],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs") [Var 2,Lit (Intc 11),Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661._#lambda1665._#lambda1669._#lambda1673") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Alt") [Var 1,Var 2,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Alt") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Alt") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Alt") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Alt") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Alt") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Alt") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Alt") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Alt") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Alt") [4,5,6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") [Var 1,Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Rhs") [Var 1,Lit (Intc 11),Var 6]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Alt") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Alt") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Field") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Field") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Field") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Field") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Field") [4,5,6]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Field") [7,8,9]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.SpanInfo","_impl#==#Prelude.Eq#Curry.SpanInfo.SpanInfo") [Var 4,Var 7],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.QualIdent") [Var 5,Var 8]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 6],Var 9]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Field") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Field") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Field") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675") [Var 1]],Var 3])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude",":") [12,13]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 12,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 13) [Branch (Pattern ("Prelude",":") [14,15]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 14,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 15) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678._#lambda1682") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.SpanInfo","_impl#readsPrec#Prelude.Read#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [16,17]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678._#lambda1682") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678._#lambda1682._#lambda1686") [Var 4,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.QualIdent") [Lit (Intc 11),Var 5]],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678._#lambda1682._#lambda1686") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678._#lambda1682._#lambda1686._#lambda1690") [Var 5,Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 2],Lit (Intc 11)],Var 6]],Var 4])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678._#lambda1682._#lambda1686._#lambda1690") 4 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [1,2,3,4] (Case Rigid (Var 3) [Branch (Pattern ("Prelude","(,)") [5,6]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Field") [Var 2,Var 1,Var 5],Var 6],Var 4])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Field") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Field") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Field") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Field") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Field") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Field") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Field") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Field") [4,5,6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.SpanInfo","_impl#showsPrec#Prelude.Show#Curry.SpanInfo.SpanInfo") [Lit (Intc 11),Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.QualIdent") [Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 6]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Field") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Var") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Var") [Var 1],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Var") [Var 1]])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Var") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1,2,3] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","Var") [4,5]) (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Var") [6,7]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","==") [Var 1],Var 4],Var 6],Comb FuncCall ("Curry.Ident","_impl#==#Prelude.Eq#Curry.Ident.Ident") [Var 5,Var 7]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Var") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Var") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var") [Var 1],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Var") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692") [Var 1]],Var 3])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692._#lambda1695") [Var 1],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692._#lambda1695") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Case Rigid (Var 4) [Branch (Pattern ("Prelude",":") [6,7]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 6,Lit (Charc 'V')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 7) [Branch (Pattern ("Prelude",":") [8,9]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 8,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 9) [Branch (Pattern ("Prelude",":") [10,11]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 10,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 11) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692._#lambda1695._#lambda1699") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readsPrec") [Var 1],Lit (Intc 11)],Var 5]],Var 3]),Branch (Pattern ("Prelude",":") [12,13]) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)]),Branch (Pattern ("Prelude","False") []) (Var 3)]),Branch (Pattern ("Prelude","[]") []) (Var 3)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692._#lambda1695._#lambda1699") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692._#lambda1695._#lambda1699._#lambda1703") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Ident","_impl#readsPrec#Prelude.Read#Curry.Ident.Ident") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692._#lambda1695._#lambda1699._#lambda1703") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","Var") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Var") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Var") [TVar 0]])) (Rule [1] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Var") [Var 1],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Var") [Var 1],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Var") [Var 1]])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [1] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Var") [Var 1]])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Var") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [1,2,3] (Case Flex (Var 3) [Branch (Pattern ("Curry.Types","Var") [4,5]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 2],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'V'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","showsPrec") [Var 1],Lit (Intc 11)],Var 4],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Ident","_impl#showsPrec#Prelude.Show#Curry.Ident.Ident") [Lit (Intc 11),Var 5]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Var") [Var 1]])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Extension") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Extension") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Extension") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Extension") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Extension") 2 Public (FuncType (TCons ("Curry.Types","Extension") []) (FuncType (TCons ("Curry.Types","Extension") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","KnownExtension") [3,4]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","KnownExtension") [5,6]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.Position","_impl#==#Prelude.Eq#Curry.Position.Position") [Var 3,Var 5],Comb FuncCall ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.KnownExtension") [Var 4,Var 6]]),Branch (Pattern ("Curry.Types","UnknownExtension") [7,8]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","UnknownExtension") [9,10]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","KnownExtension") [11,12]) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnknownExtension") [13,14]) (Comb FuncCall ("Prelude","&&") [Comb FuncCall ("Curry.Position","_impl#==#Prelude.Eq#Curry.Position.Position") [Var 9,Var 13],Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 10,Var 14]])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Extension") 0 Public (FuncType (TCons ("Curry.Types","Extension") []) (FuncType (TCons ("Curry.Types","Extension") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Extension") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Extension") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Extension") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Extension") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718") []],Var 2]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705._#lambda1708") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705._#lambda1708") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'K')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'w')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705._#lambda1708._#lambda1712") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Position","_impl#readsPrec#Prelude.Read#Curry.Position.Position") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [33,34]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705._#lambda1708._#lambda1712") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Position","Position") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705._#lambda1708._#lambda1712._#lambda1716") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension") [Lit (Intc 11),Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705._#lambda1708._#lambda1712._#lambda1716") 3 Private (FuncType (TCons ("Curry.Position","Position") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","KnownExtension") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718._#lambda1721") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718._#lambda1721") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'U')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'k')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'w')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 33,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 35,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 36) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718._#lambda1721._#lambda1725") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Curry.Position","_impl#readsPrec#Prelude.Read#Curry.Position.Position") [Lit (Intc 11),Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [37,38]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718._#lambda1721._#lambda1725") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Position","Position") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718._#lambda1721._#lambda1725._#lambda1729") [Var 3],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [],Lit (Intc 11)],Var 4]],Var 2])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718._#lambda1721._#lambda1725._#lambda1729") 3 Private (FuncType (TCons ("Curry.Position","Position") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [1,2,3] (Case Rigid (Var 2) [Branch (Pattern ("Prelude","(,)") [4,5]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","UnknownExtension") [Var 1,Var 4],Var 5],Var 3])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Extension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Extension") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Extension") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Extension") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Extension") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Extension") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Extension") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Extension") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Extension") 0 Public (FuncType (TCons ("Curry.Types","Extension") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Extension") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Extension") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Extension") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","KnownExtension") [3,4]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'K'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Position","_impl#showsPrec#Prelude.Show#Curry.Position.Position") [Lit (Intc 11),Var 3],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.KnownExtension") [Lit (Intc 11),Var 4]]]]]),Branch (Pattern ("Curry.Types","UnknownExtension") [5,6]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'k'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]],Comb FuncCall ("Prelude",".") [Comb FuncCall ("Curry.Position","_impl#showsPrec#Prelude.Show#Curry.Position.Position") [Lit (Intc 11),Var 5],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [],Lit (Intc 11)],Var 6]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Extension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Extension") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Extension") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.KnownExtension") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","KnownExtension") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.KnownExtension") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.KnownExtension") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.KnownExtension") 2 Public (FuncType (TCons ("Curry.Types","KnownExtension") []) (FuncType (TCons ("Curry.Types","KnownExtension") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","AnonFreeVars") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","AnonFreeVars") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","CPP") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExistentialQuantification") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionalPatterns") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativeLiterals") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NoImplicitPrelude") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","CPP") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","AnonFreeVars") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","CPP") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","ExistentialQuantification") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionalPatterns") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativeLiterals") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NoImplicitPrelude") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","ExistentialQuantification") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","AnonFreeVars") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","CPP") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExistentialQuantification") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","FunctionalPatterns") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativeLiterals") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NoImplicitPrelude") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","FunctionalPatterns") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","AnonFreeVars") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","CPP") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExistentialQuantification") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionalPatterns") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","NegativeLiterals") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NoImplicitPrelude") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","NegativeLiterals") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","AnonFreeVars") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","CPP") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExistentialQuantification") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionalPatterns") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativeLiterals") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","NoImplicitPrelude") []) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","NoImplicitPrelude") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","AnonFreeVars") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","CPP") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","ExistentialQuantification") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FunctionalPatterns") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NegativeLiterals") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","NoImplicitPrelude") []) (Comb ConsCall ("Prelude","True") [])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.KnownExtension") 0 Public (FuncType (TCons ("Curry.Types","KnownExtension") []) (FuncType (TCons ("Curry.Types","KnownExtension") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.KnownExtension") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.KnownExtension") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","KnownExtension") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.KnownExtension") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1731") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1736") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1741") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1746") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1751") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1756") []],Var 2]]]]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1731") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1731._#lambda1734") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1731._#lambda1734") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'V')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","AnonFreeVars") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [29,30]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1736") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1736._#lambda1739") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1736._#lambda1739") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","CPP") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [11,12]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1741") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1741._#lambda1744") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1741._#lambda1744") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'x')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'Q')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 33,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 35,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 37,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 39,Lit (Charc 'f')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 40) [Branch (Pattern ("Prelude",":") [41,42]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 41,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 42) [Branch (Pattern ("Prelude",":") [43,44]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 43,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 44) [Branch (Pattern ("Prelude",":") [45,46]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 45,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 46) [Branch (Pattern ("Prelude",":") [47,48]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 47,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 48) [Branch (Pattern ("Prelude",":") [49,50]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 49,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 50) [Branch (Pattern ("Prelude",":") [51,52]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 51,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 52) [Branch (Pattern ("Prelude",":") [53,54]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 53,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 54) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","ExistentialQuantification") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [55,56]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1746") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1746._#lambda1749") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1746._#lambda1749") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 33,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 35,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 37,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 38) [Branch (Pattern ("Prelude",":") [39,40]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 39,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 40) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","FunctionalPatterns") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [41,42]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1751") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1751._#lambda1754") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1751._#lambda1754") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'N')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'g')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'v')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'L')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 'a')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 33,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 35,Lit (Charc 's')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 36) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","NegativeLiterals") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [37,38]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1756") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1756._#lambda1759") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1756._#lambda1759") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'N')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'm')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'p')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'c')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'i')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 't')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude",":") [27,28]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 27,Lit (Charc 'r')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 28) [Branch (Pattern ("Prelude",":") [29,30]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 29,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 30) [Branch (Pattern ("Prelude",":") [31,32]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 31,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 32) [Branch (Pattern ("Prelude",":") [33,34]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 33,Lit (Charc 'u')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 34) [Branch (Pattern ("Prelude",":") [35,36]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 35,Lit (Charc 'd')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 36) [Branch (Pattern ("Prelude",":") [37,38]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 37,Lit (Charc 'e')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 38) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","NoImplicitPrelude") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [39,40]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.KnownExtension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","KnownExtension") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.KnownExtension") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.KnownExtension") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","KnownExtension") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.KnownExtension") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.KnownExtension") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.KnownExtension") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.KnownExtension") 0 Public (FuncType (TCons ("Curry.Types","KnownExtension") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.KnownExtension") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.KnownExtension") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","KnownExtension") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","AnonFreeVars") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'V'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]),Branch (Pattern ("Curry.Types","CPP") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude","[]") []]]]]),Branch (Pattern ("Curry.Types","ExistentialQuantification") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'x'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'Q'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'f'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Curry.Types","FunctionalPatterns") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]]]),Branch (Pattern ("Curry.Types","NegativeLiterals") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'g'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'v'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'L'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'a'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 's'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]),Branch (Pattern ("Curry.Types","NoImplicitPrelude") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'm'),Comb ConsCall ("Prelude",":") [Lit (Charc 'p'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 'c'),Comb ConsCall ("Prelude",":") [Lit (Charc 'i'),Comb ConsCall ("Prelude",":") [Lit (Charc 't'),Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'r'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc 'u'),Comb ConsCall ("Prelude",":") [Lit (Charc 'd'),Comb ConsCall ("Prelude",":") [Lit (Charc 'e'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]]]]]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.KnownExtension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","KnownExtension") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.KnownExtension") []])),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Tool") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Tool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Eq") [Comb (FuncPartCall 2) ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Tool") [],Comb FuncCall ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Tool") []])),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Tool") 2 Public (FuncType (TCons ("Curry.Types","Tool") []) (FuncType (TCons ("Curry.Types","Tool") []) (TCons ("Prelude","Bool") []))) (Rule [1,2] (Case Flex (Var 1) [Branch (Pattern ("Curry.Types","KICS2") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","KICS2") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","PAKCS") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","CYMAKE") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FRONTEND") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnknownTool") [3]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","PAKCS") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","KICS2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PAKCS") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","CYMAKE") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FRONTEND") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnknownTool") [4]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","CYMAKE") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","KICS2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PAKCS") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","CYMAKE") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","FRONTEND") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnknownTool") [5]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","FRONTEND") []) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","KICS2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PAKCS") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","CYMAKE") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FRONTEND") []) (Comb ConsCall ("Prelude","True") []),Branch (Pattern ("Curry.Types","UnknownTool") [6]) (Comb ConsCall ("Prelude","False") [])]),Branch (Pattern ("Curry.Types","UnknownTool") [7]) (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","KICS2") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","PAKCS") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","CYMAKE") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","FRONTEND") []) (Comb ConsCall ("Prelude","False") []),Branch (Pattern ("Curry.Types","UnknownTool") [8]) (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Eq#Prelude.Char") [],Var 7,Var 8])])])),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Tool") 0 Public (FuncType (TCons ("Curry.Types","Tool") []) (FuncType (TCons ("Curry.Types","Tool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#/=#Prelude.Eq") [Comb FuncCall ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Tool") []])),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Tool") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Tool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Read") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool") [],Comb FuncCall ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Tool") []])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1761") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1766") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1771") []],Var 2],Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb ConsCall ("Prelude","False") [],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1776") []],Var 2],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","readParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb (FuncPartCall 1) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1781") []],Var 2]]]]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1761") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1761._#lambda1764") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1761._#lambda1764") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'K')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'I')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'S')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc '2')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","KICS2") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [15,16]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1766") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1766._#lambda1769") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1766._#lambda1769") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'P')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'K')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'S')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","PAKCS") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [15,16]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1771") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1771._#lambda1774") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1771._#lambda1774") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'C')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'Y')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'M')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'A')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'K')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","CYMAKE") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [17,18]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1776") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1776._#lambda1779") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1776._#lambda1779") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'F')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'R')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'O')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'N')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'E')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'N')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'D')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude","[]") []) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","FRONTEND") [],Var 4],Var 2]),Branch (Pattern ("Prelude",":") [21,22]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1781") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [1] (Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1781._#lambda1784") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","lex") [Var 1]])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1781._#lambda1784") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Case Rigid (Var 3) [Branch (Pattern ("Prelude",":") [5,6]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 5,Lit (Charc 'U')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 6) [Branch (Pattern ("Prelude",":") [7,8]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 7,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 8) [Branch (Pattern ("Prelude",":") [9,10]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 9,Lit (Charc 'k')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 10) [Branch (Pattern ("Prelude",":") [11,12]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 11,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 12) [Branch (Pattern ("Prelude",":") [13,14]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 13,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 14) [Branch (Pattern ("Prelude",":") [15,16]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 15,Lit (Charc 'w')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 16) [Branch (Pattern ("Prelude",":") [17,18]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 17,Lit (Charc 'n')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 18) [Branch (Pattern ("Prelude",":") [19,20]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 19,Lit (Charc 'T')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 20) [Branch (Pattern ("Prelude",":") [21,22]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 21,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 22) [Branch (Pattern ("Prelude",":") [23,24]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 23,Lit (Charc 'o')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 24) [Branch (Pattern ("Prelude",":") [25,26]) (Case Rigid (Comb FuncCall ("Prelude","_impl#==#Prelude.Eq#Prelude.Char") [Var 25,Lit (Charc 'l')]) [Branch (Pattern ("Prelude","True") []) (Case Rigid (Var 26) [Branch (Pattern ("Prelude","[]") []) (Comb FuncCall ("Prelude","++") [Comb FuncCall ("Prelude","foldr") [Comb (FuncPartCall 2) ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1781._#lambda1784._#lambda1788") [],Comb ConsCall ("Prelude","[]") [],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#readsPrec#Prelude.Read#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Read#Prelude.Char") [],Lit (Intc 11)],Var 4]],Var 2]),Branch (Pattern ("Prelude",":") [27,28]) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)]),Branch (Pattern ("Prelude","False") []) (Var 2)]),Branch (Pattern ("Prelude","[]") []) (Var 2)])])),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1781._#lambda1784._#lambda1788") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [1,2] (Case Rigid (Var 1) [Branch (Pattern ("Prelude","(,)") [3,4]) (Comb ConsCall ("Prelude",":") [Comb ConsCall ("Prelude","(,)") [Comb ConsCall ("Curry.Types","UnknownTool") [Var 3],Var 4],Var 2])])),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Tool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Tool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Comb FuncCall ("Prelude","_def#readList#Prelude.Read") [Comb FuncCall ("Curry.Types","_inst#Prelude.Read#Curry.Types.Tool") []])),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Tool") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Tool") []]) (Rule [] (Comb ConsCall ("Prelude","_Dict#Show") [Comb FuncCall ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Tool") [],Comb (FuncPartCall 2) ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Tool") [],Comb FuncCall ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Tool") []])),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Tool") 0 Public (FuncType (TCons ("Curry.Types","Tool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Comb (FuncPartCall 1) ("Prelude","_def#show#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Tool") []])),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Tool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Tool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [1,2] (Case Flex (Var 2) [Branch (Pattern ("Curry.Types","KICS2") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'K'),Comb ConsCall ("Prelude",":") [Lit (Charc 'I'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude",":") [Lit (Charc '2'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Curry.Types","PAKCS") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'P'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'K'),Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'S'),Comb ConsCall ("Prelude","[]") []]]]]]]),Branch (Pattern ("Curry.Types","CYMAKE") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'C'),Comb ConsCall ("Prelude",":") [Lit (Charc 'Y'),Comb ConsCall ("Prelude",":") [Lit (Charc 'M'),Comb ConsCall ("Prelude",":") [Lit (Charc 'A'),Comb ConsCall ("Prelude",":") [Lit (Charc 'K'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude","[]") []]]]]]]]),Branch (Pattern ("Curry.Types","FRONTEND") []) (Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'F'),Comb ConsCall ("Prelude",":") [Lit (Charc 'R'),Comb ConsCall ("Prelude",":") [Lit (Charc 'O'),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'E'),Comb ConsCall ("Prelude",":") [Lit (Charc 'N'),Comb ConsCall ("Prelude",":") [Lit (Charc 'D'),Comb ConsCall ("Prelude","[]") []]]]]]]]]]),Branch (Pattern ("Curry.Types","UnknownTool") [3]) (Comb FuncCall ("Prelude","showParen") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#<#Prelude.Ord#Prelude.Int") [],Lit (Intc 10)],Var 1],Comb FuncCall ("Prelude",".") [Comb (FuncPartCall 1) ("Prelude","showString") [Comb ConsCall ("Prelude",":") [Lit (Charc 'U'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'k'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'w'),Comb ConsCall ("Prelude",":") [Lit (Charc 'n'),Comb ConsCall ("Prelude",":") [Lit (Charc 'T'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'o'),Comb ConsCall ("Prelude",":") [Lit (Charc 'l'),Comb ConsCall ("Prelude",":") [Lit (Charc ' '),Comb ConsCall ("Prelude","[]") []]]]]]]]]]]]]],Comb FuncCall ("Prelude","apply") [Comb FuncCall ("Prelude","_impl#showsPrec#Prelude.Show#[]") [Comb FuncCall ("Prelude","_inst#Prelude.Show#Prelude.Char") [],Lit (Intc 11)],Var 3]]])])),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Tool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Tool") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Comb (FuncPartCall 2) ("Prelude","_def#showList#Prelude.Show") [Comb FuncCall ("Curry.Types","_inst#Prelude.Show#Curry.Types.Tool") []]))] []