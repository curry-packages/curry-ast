Prog "Curry.Types" ["Curry.Ident","Curry.Position","Curry.SpanInfo","Prelude"] [TypeSyn ("Curry.Types","Qualified") Public [] (TCons ("Prelude","Bool") []),TypeSyn ("Curry.Types","Precedence") Public [] (TCons ("Prelude","Int") []),TypeSyn ("Curry.Types","Context") Public [] (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]),TypeSyn ("Curry.Types","InstanceType") Public [] (TCons ("Curry.Types","TypeExpr") []),Type ("Curry.Types","Module") Public [0] [Cons ("Curry.Types","Module") 6 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []],TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","Maybe") [TCons ("Curry.Types","ExportSpec") []],TCons ("Prelude","[]") [TCons ("Curry.Types","ImportDecl") []],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]]],Type ("Curry.Types","ModulePragma") Public [] [Cons ("Curry.Types","LanguagePragma") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Extension") []]],Cons ("Curry.Types","OptionsPragma") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","Maybe") [TCons ("Curry.Types","Tool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Curry.Types","ExportSpec") Public [] [Cons ("Curry.Types","Exporting") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Export") []]]],Type ("Curry.Types","Export") Public [] [Cons ("Curry.Types","Export") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","ExportTypeWith") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]],Cons ("Curry.Types","ExportTypeAll") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","ExportModule") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","ModuleIdent") []]],Type ("Curry.Types","ImportDecl") Public [] [Cons ("Curry.Types","ImportDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","Bool") [],TCons ("Prelude","Maybe") [TCons ("Curry.Ident","ModuleIdent") []],TCons ("Prelude","Maybe") [TCons ("Curry.Types","ImportSpec") []]]],Type ("Curry.Types","ImportSpec") Public [] [Cons ("Curry.Types","Importing") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []]],Cons ("Curry.Types","Hiding") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []]]],Type ("Curry.Types","Import") Public [] [Cons ("Curry.Types","Import") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") []],Cons ("Curry.Types","ImportTypeWith") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]],Cons ("Curry.Types","ImportTypeAll") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") []]],Type ("Curry.Types","Decl") Public [0] [Cons ("Curry.Types","InfixDecl") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Infix") [],TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]],Cons ("Curry.Types","DataDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Curry.Types","ConstrDecl") []],TCons ("Prelude","[]") [TCons ("Curry.Ident","QualIdent") []]],Cons ("Curry.Types","ExternalDataDecl") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]],Cons ("Curry.Types","NewtypeDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","QualIdent") []]],Cons ("Curry.Types","TypeDecl") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","TypeSig") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Curry.Types","QualTypeExpr") []],Cons ("Curry.Types","FunctionDecl") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Equation") [TVar 0]]],Cons ("Curry.Types","ExternalDecl") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]]],Cons ("Curry.Types","PatternDecl") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Types","Rhs") [TVar 0]],Cons ("Curry.Types","FreeDecl") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]]],Cons ("Curry.Types","DefaultDecl") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []]],Cons ("Curry.Types","ClassDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Ident","Ident") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]],Cons ("Curry.Types","InstanceDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Ident","QualIdent") [],TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]]],Type ("Curry.Types","Infix") Public [] [Cons ("Curry.Types","InfixL") 0 Public [],Cons ("Curry.Types","InfixR") 0 Public [],Cons ("Curry.Types","Infix") 0 Public []],Type ("Curry.Types","ConstrDecl") Public [] [Cons ("Curry.Types","ConstrDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []]],Cons ("Curry.Types","ConOpDecl") 6 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Types","TypeExpr") [],TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","RecordDecl") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Types","FieldDecl") []]]],Type ("Curry.Types","NewConstrDecl") Public [] [Cons ("Curry.Types","NewConstrDecl") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","NewRecordDecl") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","TypeExpr") []]]],Type ("Curry.Types","FieldDecl") Public [] [Cons ("Curry.Types","FieldDecl") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Curry.Types","TypeExpr") []]],Type ("Curry.Types","TypeExpr") Public [] [Cons ("Curry.Types","ConstructorType") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","ApplyType") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","TypeExpr") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","VariableType") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") []],Cons ("Curry.Types","TupleType") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []]],Cons ("Curry.Types","ListType") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","ArrowType") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","TypeExpr") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","ParenType") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","TypeExpr") []],Cons ("Curry.Types","ForallType") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Curry.Types","TypeExpr") []]],Type ("Curry.Types","QualTypeExpr") Public [] [Cons ("Curry.Types","QualTypeExpr") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Curry.Types","TypeExpr") []]],Type ("Curry.Types","Constraint") Public [] [Cons ("Curry.Types","Constraint") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") [],TCons ("Curry.Types","TypeExpr") []]],Type ("Curry.Types","Equation") Public [0] [Cons ("Curry.Types","Equation") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Curry.Types","Rhs") [TVar 0]]],Type ("Curry.Types","Lhs") Public [0] [Cons ("Curry.Types","FunLhs") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]],Cons ("Curry.Types","OpLhs") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","Pattern") [TVar 0]],Cons ("Curry.Types","ApLhs") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]]],Type ("Curry.Types","Rhs") Public [0] [Cons ("Curry.Types","SimpleRhs") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]],Cons ("Curry.Types","GuardedRhs") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","CondExpr") [TVar 0]],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]]],Type ("Curry.Types","CondExpr") Public [0] [Cons ("Curry.Types","CondExpr") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]]],Type ("Curry.Types","Literal") Public [] [Cons ("Curry.Types","Char") 1 Public [TCons ("Prelude","Char") []],Cons ("Curry.Types","Int") 1 Public [TCons ("Prelude","Int") []],Cons ("Curry.Types","Float") 1 Public [TCons ("Prelude","Float") []],Cons ("Curry.Types","String") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Curry.Types","Pattern") Public [0] [Cons ("Curry.Types","LiteralPattern") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Types","Literal") []],Cons ("Curry.Types","NegativePattern") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Types","Literal") []],Cons ("Curry.Types","VariablePattern") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","Ident") []],Cons ("Curry.Types","ConstructorPattern") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]],Cons ("Curry.Types","InfixPattern") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Ident","QualIdent") [],TCons ("Curry.Types","Pattern") [TVar 0]],Cons ("Curry.Types","ParenPattern") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0]],Cons ("Curry.Types","RecordPattern") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Pattern") [TVar 0]]]],Cons ("Curry.Types","TuplePattern") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]],Cons ("Curry.Types","ListPattern") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]],Cons ("Curry.Types","AsPattern") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","Pattern") [TVar 0]],Cons ("Curry.Types","LazyPattern") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0]],Cons ("Curry.Types","FunctionPattern") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]],Cons ("Curry.Types","InfixFuncPattern") 5 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Ident","QualIdent") [],TCons ("Curry.Types","Pattern") [TVar 0]]],Type ("Curry.Types","Expression") Public [0] [Cons ("Curry.Types","Literal") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Types","Literal") []],Cons ("Curry.Types","Variable") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","Constructor") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","Paren") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Typed") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","QualTypeExpr") []],Cons ("Curry.Types","Record") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Expression") [TVar 0]]]],Cons ("Curry.Types","RecordUpdate") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Expression") [TVar 0]]]],Cons ("Curry.Types","Tuple") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]]],Cons ("Curry.Types","List") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TVar 0,TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]]],Cons ("Curry.Types","ListCompr") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]]],Cons ("Curry.Types","EnumFrom") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","EnumFromThen") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","EnumFromTo") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","EnumFromThenTo") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","UnaryMinus") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Apply") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","InfixApply") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","LeftSection") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","InfixOp") [TVar 0]],Cons ("Curry.Types","RightSection") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Lambda") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Let") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Do") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","IfThenElse") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","Case") 4 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","CaseType") [],TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Curry.Types","Alt") [TVar 0]]]],Type ("Curry.Types","InfixOp") Public [0] [Cons ("Curry.Types","InfixOp") 2 Public [TVar 0,TCons ("Curry.Ident","QualIdent") []],Cons ("Curry.Types","InfixConstr") 2 Public [TVar 0,TCons ("Curry.Ident","QualIdent") []]],Type ("Curry.Types","Statement") Public [0] [Cons ("Curry.Types","StmtExpr") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Expression") [TVar 0]],Cons ("Curry.Types","StmtDecl") 2 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]],Cons ("Curry.Types","StmtBind") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Types","Expression") [TVar 0]]],Type ("Curry.Types","CaseType") Public [] [Cons ("Curry.Types","Rigid") 0 Public [],Cons ("Curry.Types","Flex") 0 Public []],Type ("Curry.Types","Alt") Public [0] [Cons ("Curry.Types","Alt") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Curry.Types","Rhs") [TVar 0]]],Type ("Curry.Types","Field") Public [0] [Cons ("Curry.Types","Field") 3 Public [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Curry.Ident","QualIdent") [],TVar 0]],Type ("Curry.Types","Var") Public [0] [Cons ("Curry.Types","Var") 2 Public [TVar 0,TCons ("Curry.Ident","Ident") []]],Type ("Curry.Types","Extension") Public [] [Cons ("Curry.Types","KnownExtension") 2 Public [TCons ("Curry.Position","Position") [],TCons ("Curry.Types","KnownExtension") []],Cons ("Curry.Types","UnknownExtension") 2 Public [TCons ("Curry.Position","Position") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]],Type ("Curry.Types","KnownExtension") Public [] [Cons ("Curry.Types","AnonFreeVars") 0 Public [],Cons ("Curry.Types","CPP") 0 Public [],Cons ("Curry.Types","ExistentialQuantification") 0 Public [],Cons ("Curry.Types","FunctionalPatterns") 0 Public [],Cons ("Curry.Types","NegativeLiterals") 0 Public [],Cons ("Curry.Types","NoImplicitPrelude") 0 Public []],Type ("Curry.Types","Tool") Public [] [Cons ("Curry.Types","KICS2") 0 Public [],Cons ("Curry.Types","PAKCS") 0 Public [],Cons ("Curry.Types","CYMAKE") 0 Public [],Cons ("Curry.Types","FRONTEND") 0 Public [],Cons ("Curry.Types","UnknownTool") 1 Public [TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]] [Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Module") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Module") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Module") 1 Public (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Module") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (TCons ("Curry.Types","Module") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Decl") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Decl") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Decl") 1 Public (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Decl") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (TCons ("Curry.Types","Decl") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Equation") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Equation") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Equation") 1 Public (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Equation") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (TCons ("Curry.Types","Equation") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.ModulePragma") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","ModulePragma") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ModulePragma") 1 Public (FuncType (TCons ("Curry.Types","ModulePragma") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ModulePragma") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","ModulePragma") []) (TCons ("Curry.Types","ModulePragma") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.ExportSpec") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","ExportSpec") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ExportSpec") 1 Public (FuncType (TCons ("Curry.Types","ExportSpec") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ExportSpec") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","ExportSpec") []) (TCons ("Curry.Types","ExportSpec") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Export") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Export") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Export") 1 Public (FuncType (TCons ("Curry.Types","Export") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Export") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Export") []) (TCons ("Curry.Types","Export") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportDecl") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","ImportDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportDecl") 1 Public (FuncType (TCons ("Curry.Types","ImportDecl") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportDecl") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","ImportDecl") []) (TCons ("Curry.Types","ImportDecl") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportSpec") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","ImportSpec") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportSpec") 1 Public (FuncType (TCons ("Curry.Types","ImportSpec") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ImportSpec") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","ImportSpec") []) (TCons ("Curry.Types","ImportSpec") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Import") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Import") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Import") 1 Public (FuncType (TCons ("Curry.Types","Import") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Import") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Import") []) (TCons ("Curry.Types","Import") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.ConstrDecl") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","ConstrDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ConstrDecl") 1 Public (FuncType (TCons ("Curry.Types","ConstrDecl") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.ConstrDecl") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","ConstrDecl") []) (TCons ("Curry.Types","ConstrDecl") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.NewConstrDecl") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","NewConstrDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.NewConstrDecl") 1 Public (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.NewConstrDecl") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (TCons ("Curry.Types","NewConstrDecl") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.FieldDecl") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","FieldDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.FieldDecl") 1 Public (FuncType (TCons ("Curry.Types","FieldDecl") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.FieldDecl") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","FieldDecl") []) (TCons ("Curry.Types","FieldDecl") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.TypeExpr") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","TypeExpr") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.TypeExpr") 1 Public (FuncType (TCons ("Curry.Types","TypeExpr") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.TypeExpr") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (TCons ("Curry.Types","TypeExpr") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.QualTypeExpr") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","QualTypeExpr") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.QualTypeExpr") 1 Public (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.QualTypeExpr") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (TCons ("Curry.Types","QualTypeExpr") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Constraint") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Constraint") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Constraint") 1 Public (FuncType (TCons ("Curry.Types","Constraint") []) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Constraint") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Constraint") []) (TCons ("Curry.Types","Constraint") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Lhs") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Lhs") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Lhs") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (TCons ("Curry.Types","Lhs") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Rhs") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Rhs") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Rhs") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (TCons ("Curry.Types","Rhs") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.CondExpr") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","CondExpr") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.CondExpr") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (TCons ("Curry.Types","CondExpr") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Pattern") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Pattern") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Pattern") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (TCons ("Curry.Types","Pattern") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Expression") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Expression") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Expression") 1 Public (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Expression") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (TCons ("Curry.Types","Expression") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Statement") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Statement") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Statement") 1 Public (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Statement") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (TCons ("Curry.Types","Statement") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Alt") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Alt") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Alt") 1 Public (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Alt") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (TCons ("Curry.Types","Alt") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Curry.SpanInfo.HasSpanInfo#Curry.Types.Field") 0 Public (TCons ("Curry.SpanInfo","_Dict#HasSpanInfo") [TCons ("Curry.Types","Field") [TVar 0]]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#getSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Field") 1 Public (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (TCons ("Curry.SpanInfo","SpanInfo") [])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#setSpanInfo#Curry.SpanInfo.HasSpanInfo#Curry.Types.Field") 2 Public (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (TCons ("Curry.Types","Field") [TVar 0]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Module") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Module") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Module") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16._#lambda20") 6 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Curry.Types","ExportSpec") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16._#lambda20._#lambda24") 7 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Curry.Types","ExportSpec") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ImportDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Module._#lambda1._#lambda4._#lambda8._#lambda12._#lambda16._#lambda20._#lambda24._#lambda28") 7 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ImportDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []]) (FuncType (TCons ("Prelude","Maybe") [TCons ("Curry.Types","ExportSpec") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Module") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Module") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Module") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Module") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Module") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Module") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Module") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ModulePragma") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","ModulePragma") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ModulePragma") 2 Public (FuncType (TCons ("Curry.Types","ModulePragma") []) (FuncType (TCons ("Curry.Types","ModulePragma") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ModulePragma") 0 Public (FuncType (TCons ("Curry.Types","ModulePragma") []) (FuncType (TCons ("Curry.Types","ModulePragma") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.ModulePragma") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","ModulePragma") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30._#lambda33") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30._#lambda33._#lambda37") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda30._#lambda33._#lambda37._#lambda41") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Extension") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46._#lambda50") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46._#lambda50._#lambda54") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Curry.Types","Tool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ModulePragma._#lambda43._#lambda46._#lambda50._#lambda54._#lambda58") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Curry.Types","Tool") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ModulePragma") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ModulePragma") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.ModulePragma") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","ModulePragma") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ModulePragma") 0 Public (FuncType (TCons ("Curry.Types","ModulePragma") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ModulePragma") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","ModulePragma") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ModulePragma") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ModulePragma") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ExportSpec") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","ExportSpec") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ExportSpec") 2 Public (FuncType (TCons ("Curry.Types","ExportSpec") []) (FuncType (TCons ("Curry.Types","ExportSpec") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ExportSpec") 0 Public (FuncType (TCons ("Curry.Types","ExportSpec") []) (FuncType (TCons ("Curry.Types","ExportSpec") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.ExportSpec") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","ExportSpec") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60._#lambda63") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60._#lambda63._#lambda67") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ExportSpec._#lambda60._#lambda63._#lambda67._#lambda71") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Export") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ExportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ExportSpec") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ExportSpec") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.ExportSpec") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","ExportSpec") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ExportSpec") 0 Public (FuncType (TCons ("Curry.Types","ExportSpec") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ExportSpec") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","ExportSpec") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ExportSpec") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ExportSpec") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Export") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Export") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Export") 2 Public (FuncType (TCons ("Curry.Types","Export") []) (FuncType (TCons ("Curry.Types","Export") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Export") 0 Public (FuncType (TCons ("Curry.Types","Export") []) (FuncType (TCons ("Curry.Types","Export") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Export") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Export") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73._#lambda76") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73._#lambda76._#lambda80") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda73._#lambda76._#lambda80._#lambda84") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89._#lambda93") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89._#lambda93._#lambda97") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda86._#lambda89._#lambda93._#lambda97._#lambda101") 4 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103._#lambda106") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103._#lambda106._#lambda110") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda103._#lambda106._#lambda110._#lambda114") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116._#lambda119") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116._#lambda119._#lambda123") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Export._#lambda116._#lambda119._#lambda123._#lambda127") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Export") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Export") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Export") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Export") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Export") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Export") 0 Public (FuncType (TCons ("Curry.Types","Export") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Export") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Export") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Export") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Export") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ImportDecl") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","ImportDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ImportDecl") 2 Public (FuncType (TCons ("Curry.Types","ImportDecl") []) (FuncType (TCons ("Curry.Types","ImportDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ImportDecl") 0 Public (FuncType (TCons ("Curry.Types","ImportDecl") []) (FuncType (TCons ("Curry.Types","ImportDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.ImportDecl") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","ImportDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","ModuleIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140._#lambda144") 4 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Bool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140._#lambda144._#lambda148") 5 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Curry.Ident","ModuleIdent") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportDecl._#lambda129._#lambda132._#lambda136._#lambda140._#lambda144._#lambda148._#lambda152") 6 Private (FuncType (TCons ("Curry.Ident","ModuleIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","Bool") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Curry.Ident","ModuleIdent") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Curry.Types","ImportSpec") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ImportDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ImportDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.ImportDecl") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","ImportDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ImportDecl") 0 Public (FuncType (TCons ("Curry.Types","ImportDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ImportDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","ImportDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ImportDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ImportDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ImportSpec") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","ImportSpec") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ImportSpec") 2 Public (FuncType (TCons ("Curry.Types","ImportSpec") []) (FuncType (TCons ("Curry.Types","ImportSpec") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ImportSpec") 0 Public (FuncType (TCons ("Curry.Types","ImportSpec") []) (FuncType (TCons ("Curry.Types","ImportSpec") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.ImportSpec") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","ImportSpec") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154._#lambda157") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154._#lambda157._#lambda161") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda154._#lambda157._#lambda161._#lambda165") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167._#lambda170") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167._#lambda170._#lambda174") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ImportSpec._#lambda167._#lambda170._#lambda174._#lambda178") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ImportSpec") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ImportSpec") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ImportSpec") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.ImportSpec") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","ImportSpec") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ImportSpec") 0 Public (FuncType (TCons ("Curry.Types","ImportSpec") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ImportSpec") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","ImportSpec") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ImportSpec") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ImportSpec") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Import") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Import") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Import") 2 Public (FuncType (TCons ("Curry.Types","Import") []) (FuncType (TCons ("Curry.Types","Import") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Import") 0 Public (FuncType (TCons ("Curry.Types","Import") []) (FuncType (TCons ("Curry.Types","Import") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Import") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Import") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180._#lambda183") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180._#lambda183._#lambda187") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda180._#lambda183._#lambda187._#lambda191") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196._#lambda200") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196._#lambda200._#lambda204") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda193._#lambda196._#lambda200._#lambda204._#lambda208") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210._#lambda213") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210._#lambda213._#lambda217") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Import._#lambda210._#lambda213._#lambda217._#lambda221") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Import") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Import") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Import") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Import") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Import") 0 Public (FuncType (TCons ("Curry.Types","Import") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Import") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Import") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Import") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Import") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Decl") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Decl") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Decl") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230._#lambda234") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230._#lambda234._#lambda238") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Infix") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda223._#lambda226._#lambda230._#lambda234._#lambda238._#lambda242") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Infix") []) (FuncType (TCons ("Prelude","Maybe") [TCons ("Prelude","Int") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255._#lambda259") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255._#lambda259._#lambda263") 5 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ConstrDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda244._#lambda247._#lambda251._#lambda255._#lambda259._#lambda263._#lambda267") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ConstrDecl") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","QualIdent") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272._#lambda276") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272._#lambda276._#lambda280") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda269._#lambda272._#lambda276._#lambda280._#lambda284") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297._#lambda301") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297._#lambda301._#lambda305") 5 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda286._#lambda289._#lambda293._#lambda297._#lambda301._#lambda305._#lambda309") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","QualIdent") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318._#lambda322") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318._#lambda322._#lambda326") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda311._#lambda314._#lambda318._#lambda322._#lambda326._#lambda330") 5 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335._#lambda339") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335._#lambda339._#lambda343") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda332._#lambda335._#lambda339._#lambda343._#lambda347") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356._#lambda360") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356._#lambda360._#lambda364") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda349._#lambda352._#lambda356._#lambda360._#lambda364._#lambda368") 5 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Equation") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370._#lambda373") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370._#lambda373._#lambda377") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda370._#lambda373._#lambda377._#lambda381") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386._#lambda390") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386._#lambda390._#lambda394") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda383._#lambda386._#lambda390._#lambda394._#lambda398") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400._#lambda403") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400._#lambda403._#lambda407") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda400._#lambda403._#lambda407._#lambda411") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413._#lambda416") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413._#lambda416._#lambda420") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda413._#lambda416._#lambda420._#lambda424") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437._#lambda441") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437._#lambda441._#lambda445") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda426._#lambda429._#lambda433._#lambda437._#lambda441._#lambda445._#lambda449") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462._#lambda466") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462._#lambda466._#lambda470") 6 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Decl._#lambda451._#lambda454._#lambda458._#lambda462._#lambda466._#lambda470._#lambda474") 6 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Decl") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Decl") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Decl") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Decl") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Decl") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Infix") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Infix") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Infix") 2 Public (FuncType (TCons ("Curry.Types","Infix") []) (FuncType (TCons ("Curry.Types","Infix") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Infix") 0 Public (FuncType (TCons ("Curry.Types","Infix") []) (FuncType (TCons ("Curry.Types","Infix") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Infix") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Infix") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda476") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda476._#lambda479") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda481") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda481._#lambda484") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda486") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Infix._#lambda486._#lambda489") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Infix") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Infix") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Infix") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Infix") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Infix") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Infix") 0 Public (FuncType (TCons ("Curry.Types","Infix") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Infix") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Infix") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Infix") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Infix") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.ConstrDecl") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","ConstrDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.ConstrDecl") 2 Public (FuncType (TCons ("Curry.Types","ConstrDecl") []) (FuncType (TCons ("Curry.Types","ConstrDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.ConstrDecl") 0 Public (FuncType (TCons ("Curry.Types","ConstrDecl") []) (FuncType (TCons ("Curry.Types","ConstrDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.ConstrDecl") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","ConstrDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502._#lambda506") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502._#lambda506._#lambda510") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda491._#lambda494._#lambda498._#lambda502._#lambda506._#lambda510._#lambda514") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531._#lambda535") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531._#lambda535._#lambda539") 6 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda516._#lambda519._#lambda523._#lambda527._#lambda531._#lambda535._#lambda539._#lambda543") 7 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556._#lambda560") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556._#lambda560._#lambda564") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.ConstrDecl._#lambda545._#lambda548._#lambda552._#lambda556._#lambda560._#lambda564._#lambda568") 6 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","FieldDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","ConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.ConstrDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","ConstrDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.ConstrDecl") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","ConstrDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.ConstrDecl") 0 Public (FuncType (TCons ("Curry.Types","ConstrDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.ConstrDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","ConstrDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.ConstrDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","ConstrDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.NewConstrDecl") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","NewConstrDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.NewConstrDecl") 2 Public (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.NewConstrDecl") 0 Public (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.NewConstrDecl") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","NewConstrDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573._#lambda577") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573._#lambda577._#lambda581") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda570._#lambda573._#lambda577._#lambda581._#lambda585") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590._#lambda594") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590._#lambda594._#lambda598") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.NewConstrDecl._#lambda587._#lambda590._#lambda594._#lambda598._#lambda602") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Curry.Types","TypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","NewConstrDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.NewConstrDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","NewConstrDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.NewConstrDecl") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","NewConstrDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.NewConstrDecl") 0 Public (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.NewConstrDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","NewConstrDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.NewConstrDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","NewConstrDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.FieldDecl") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","FieldDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.FieldDecl") 2 Public (FuncType (TCons ("Curry.Types","FieldDecl") []) (FuncType (TCons ("Curry.Types","FieldDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.FieldDecl") 0 Public (FuncType (TCons ("Curry.Types","FieldDecl") []) (FuncType (TCons ("Curry.Types","FieldDecl") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.FieldDecl") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","FieldDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607._#lambda611") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607._#lambda611._#lambda615") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.FieldDecl._#lambda604._#lambda607._#lambda611._#lambda615._#lambda619") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","FieldDecl") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.FieldDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","FieldDecl") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.FieldDecl") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","FieldDecl") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.FieldDecl") 0 Public (FuncType (TCons ("Curry.Types","FieldDecl") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.FieldDecl") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","FieldDecl") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.FieldDecl") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","FieldDecl") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.TypeExpr") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","TypeExpr") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.TypeExpr") 2 Public (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.TypeExpr") 0 Public (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.TypeExpr") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","TypeExpr") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621._#lambda624") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621._#lambda624._#lambda628") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda621._#lambda624._#lambda628._#lambda632") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637._#lambda641") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637._#lambda641._#lambda645") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda634._#lambda637._#lambda641._#lambda645._#lambda649") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651._#lambda654") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651._#lambda654._#lambda658") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda651._#lambda654._#lambda658._#lambda662") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664._#lambda667") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664._#lambda667._#lambda671") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda664._#lambda667._#lambda671._#lambda675") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677._#lambda680") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677._#lambda680._#lambda684") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda677._#lambda680._#lambda684._#lambda688") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693._#lambda697") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693._#lambda697._#lambda701") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda690._#lambda693._#lambda697._#lambda701._#lambda705") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707._#lambda710") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707._#lambda710._#lambda714") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda707._#lambda710._#lambda714._#lambda718") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723._#lambda727") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723._#lambda727._#lambda731") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.TypeExpr._#lambda720._#lambda723._#lambda727._#lambda731._#lambda735") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Ident","Ident") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.TypeExpr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.TypeExpr") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","TypeExpr") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.TypeExpr") 0 Public (FuncType (TCons ("Curry.Types","TypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.TypeExpr") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","TypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.TypeExpr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","TypeExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.QualTypeExpr") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","QualTypeExpr") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.QualTypeExpr") 2 Public (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.QualTypeExpr") 0 Public (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.QualTypeExpr") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","QualTypeExpr") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740._#lambda744") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740._#lambda744._#lambda748") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.QualTypeExpr._#lambda737._#lambda740._#lambda744._#lambda748._#lambda752") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.QualTypeExpr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","QualTypeExpr") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.QualTypeExpr") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","QualTypeExpr") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.QualTypeExpr") 0 Public (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.QualTypeExpr") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","QualTypeExpr") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.QualTypeExpr") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","QualTypeExpr") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Constraint") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Constraint") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Constraint") 2 Public (FuncType (TCons ("Curry.Types","Constraint") []) (FuncType (TCons ("Curry.Types","Constraint") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Constraint") 0 Public (FuncType (TCons ("Curry.Types","Constraint") []) (FuncType (TCons ("Curry.Types","Constraint") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Constraint") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Constraint") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757._#lambda761") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757._#lambda761._#lambda765") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Constraint._#lambda754._#lambda757._#lambda761._#lambda765._#lambda769") 4 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","TypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Constraint") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Constraint") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Constraint") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Constraint") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Constraint") 0 Public (FuncType (TCons ("Curry.Types","Constraint") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Constraint") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Constraint") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Constraint") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Constraint") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Equation") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Equation") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Equation") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774._#lambda778") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774._#lambda778._#lambda782") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Equation._#lambda771._#lambda774._#lambda778._#lambda782._#lambda786") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Equation") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Equation") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Equation") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Equation") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Equation") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Equation") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Equation") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Lhs") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Lhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Lhs") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791._#lambda795") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791._#lambda795._#lambda799") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda788._#lambda791._#lambda795._#lambda799._#lambda803") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812._#lambda816") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812._#lambda816._#lambda820") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda805._#lambda808._#lambda812._#lambda816._#lambda820._#lambda824") 5 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829._#lambda833") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829._#lambda833._#lambda837") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Lhs._#lambda826._#lambda829._#lambda833._#lambda837._#lambda841") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Lhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Lhs") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Lhs") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Lhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Lhs") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Lhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Lhs") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Rhs") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Rhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Rhs") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846._#lambda850") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846._#lambda850._#lambda854") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda843._#lambda846._#lambda850._#lambda854._#lambda858") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863._#lambda867") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863._#lambda867._#lambda871") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","CondExpr") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Rhs._#lambda860._#lambda863._#lambda867._#lambda871._#lambda875") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","CondExpr") [TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Rhs") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Rhs") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Rhs") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Rhs") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Rhs") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Rhs") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","CondExpr") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.CondExpr") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","CondExpr") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880._#lambda884") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880._#lambda884._#lambda888") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CondExpr._#lambda877._#lambda880._#lambda884._#lambda888._#lambda892") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CondExpr") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","CondExpr") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","CondExpr") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.CondExpr") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","CondExpr") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.CondExpr") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","CondExpr") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Literal") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Literal") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Literal") 2 Public (FuncType (TCons ("Curry.Types","Literal") []) (FuncType (TCons ("Curry.Types","Literal") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Literal") 0 Public (FuncType (TCons ("Curry.Types","Literal") []) (FuncType (TCons ("Curry.Types","Literal") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Literal") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Literal") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda894") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda894._#lambda897") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda894._#lambda897._#lambda901") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Char") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda903") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda903._#lambda906") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda903._#lambda906._#lambda910") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Int") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda912") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda912._#lambda915") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda912._#lambda915._#lambda919") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","Float") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda921") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda921._#lambda924") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Literal._#lambda921._#lambda924._#lambda928") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Literal") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Literal") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Literal") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Literal") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Literal") 0 Public (FuncType (TCons ("Curry.Types","Literal") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Literal") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Literal") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Literal") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Literal") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Pattern") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Pattern") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Pattern") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933._#lambda937") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933._#lambda937._#lambda941") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda930._#lambda933._#lambda937._#lambda941._#lambda945") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950._#lambda954") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950._#lambda954._#lambda958") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda947._#lambda950._#lambda954._#lambda958._#lambda962") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967._#lambda971") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967._#lambda971._#lambda975") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda964._#lambda967._#lambda971._#lambda975._#lambda979") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988._#lambda992") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988._#lambda992._#lambda996") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda981._#lambda984._#lambda988._#lambda992._#lambda996._#lambda1000") 5 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013._#lambda1017") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013._#lambda1017._#lambda1021") 6 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1002._#lambda1005._#lambda1009._#lambda1013._#lambda1017._#lambda1021._#lambda1025") 6 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027._#lambda1030") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027._#lambda1030._#lambda1034") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1027._#lambda1030._#lambda1034._#lambda1038") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047._#lambda1051") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047._#lambda1051._#lambda1055") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1040._#lambda1043._#lambda1047._#lambda1051._#lambda1055._#lambda1059") 5 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Pattern") [TVar 0]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061._#lambda1064") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061._#lambda1064._#lambda1068") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1061._#lambda1064._#lambda1068._#lambda1072") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077._#lambda1081") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077._#lambda1081._#lambda1085") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1074._#lambda1077._#lambda1081._#lambda1085._#lambda1089") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094._#lambda1098") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094._#lambda1098._#lambda1102") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1091._#lambda1094._#lambda1098._#lambda1102._#lambda1106") 4 Private (FuncType (TCons ("Curry.Ident","Ident") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108._#lambda1111") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108._#lambda1111._#lambda1115") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1108._#lambda1111._#lambda1115._#lambda1119") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128._#lambda1132") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128._#lambda1132._#lambda1136") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1121._#lambda1124._#lambda1128._#lambda1132._#lambda1136._#lambda1140") 5 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153._#lambda1157") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153._#lambda1157._#lambda1161") 6 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Pattern._#lambda1142._#lambda1145._#lambda1149._#lambda1153._#lambda1157._#lambda1161._#lambda1165") 6 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Pattern") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Pattern") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Pattern") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Expression") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Expression") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Expression") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170._#lambda1174") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170._#lambda1174._#lambda1178") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1167._#lambda1170._#lambda1174._#lambda1178._#lambda1182") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Literal") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187._#lambda1191") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187._#lambda1191._#lambda1195") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1184._#lambda1187._#lambda1191._#lambda1195._#lambda1199") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204._#lambda1208") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204._#lambda1208._#lambda1212") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1201._#lambda1204._#lambda1208._#lambda1212._#lambda1216") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218._#lambda1221") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218._#lambda1221._#lambda1225") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1218._#lambda1221._#lambda1225._#lambda1229") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234._#lambda1238") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234._#lambda1238._#lambda1242") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1231._#lambda1234._#lambda1238._#lambda1242._#lambda1246") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","QualTypeExpr") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255._#lambda1259") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255._#lambda1259._#lambda1263") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1248._#lambda1251._#lambda1255._#lambda1259._#lambda1263._#lambda1267") 5 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Expression") [TVar 0]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272._#lambda1276") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272._#lambda1276._#lambda1280") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1269._#lambda1272._#lambda1276._#lambda1280._#lambda1284") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TCons ("Curry.Types","Expression") [TVar 0]]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286._#lambda1289") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286._#lambda1289._#lambda1293") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1286._#lambda1289._#lambda1293._#lambda1297") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302._#lambda1306") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302._#lambda1306._#lambda1310") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1299._#lambda1302._#lambda1306._#lambda1310._#lambda1314") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319._#lambda1323") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319._#lambda1323._#lambda1327") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1316._#lambda1319._#lambda1323._#lambda1327._#lambda1331") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333._#lambda1336") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333._#lambda1336._#lambda1340") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1333._#lambda1336._#lambda1340._#lambda1344") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349._#lambda1353") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349._#lambda1353._#lambda1357") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1346._#lambda1349._#lambda1353._#lambda1357._#lambda1361") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366._#lambda1370") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366._#lambda1370._#lambda1374") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1363._#lambda1366._#lambda1370._#lambda1374._#lambda1378") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387._#lambda1391") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387._#lambda1391._#lambda1395") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1380._#lambda1383._#lambda1387._#lambda1391._#lambda1395._#lambda1399") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401._#lambda1404") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401._#lambda1404._#lambda1408") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1401._#lambda1404._#lambda1408._#lambda1412") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417._#lambda1421") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417._#lambda1421._#lambda1425") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1414._#lambda1417._#lambda1421._#lambda1425._#lambda1429") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438._#lambda1442") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438._#lambda1442._#lambda1446") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1431._#lambda1434._#lambda1438._#lambda1442._#lambda1446._#lambda1450") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455._#lambda1459") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455._#lambda1459._#lambda1463") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1452._#lambda1455._#lambda1459._#lambda1463._#lambda1467") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472._#lambda1476") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472._#lambda1476._#lambda1480") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1469._#lambda1472._#lambda1476._#lambda1480._#lambda1484") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489._#lambda1493") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489._#lambda1493._#lambda1497") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1486._#lambda1489._#lambda1493._#lambda1497._#lambda1501") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Pattern") [TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506._#lambda1510") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506._#lambda1510._#lambda1514") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1503._#lambda1506._#lambda1510._#lambda1514._#lambda1518") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523._#lambda1527") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523._#lambda1527._#lambda1531") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1520._#lambda1523._#lambda1527._#lambda1531._#lambda1535") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544._#lambda1548") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544._#lambda1548._#lambda1552") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1537._#lambda1540._#lambda1544._#lambda1548._#lambda1552._#lambda1556") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565._#lambda1569") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565._#lambda1569._#lambda1573") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","CaseType") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Expression._#lambda1558._#lambda1561._#lambda1565._#lambda1569._#lambda1573._#lambda1577") 5 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","CaseType") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Alt") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Expression") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Expression") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Expression") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Expression") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Expression") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","InfixOp") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.InfixOp") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","InfixOp") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579._#lambda1582") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579._#lambda1582._#lambda1586") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1579._#lambda1582._#lambda1586._#lambda1590") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592._#lambda1595") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592._#lambda1595._#lambda1599") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.InfixOp._#lambda1592._#lambda1595._#lambda1599._#lambda1603") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","InfixOp") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","InfixOp") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","InfixOp") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.InfixOp") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","InfixOp") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.InfixOp") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","InfixOp") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Statement") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Statement") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Statement") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605._#lambda1608") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605._#lambda1608._#lambda1612") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1605._#lambda1608._#lambda1612._#lambda1616") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618._#lambda1621") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618._#lambda1621._#lambda1625") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1618._#lambda1621._#lambda1625._#lambda1629") 3 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Decl") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634._#lambda1638") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634._#lambda1638._#lambda1642") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Statement._#lambda1631._#lambda1634._#lambda1638._#lambda1642._#lambda1646") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Expression") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Statement") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Statement") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Statement") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Statement") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Statement") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Statement") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.CaseType") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","CaseType") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.CaseType") 2 Public (FuncType (TCons ("Curry.Types","CaseType") []) (FuncType (TCons ("Curry.Types","CaseType") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.CaseType") 0 Public (FuncType (TCons ("Curry.Types","CaseType") []) (FuncType (TCons ("Curry.Types","CaseType") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.CaseType") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","CaseType") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1648") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1648._#lambda1651") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1653") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.CaseType._#lambda1653._#lambda1656") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","CaseType") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.CaseType") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","CaseType") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.CaseType") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","CaseType") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.CaseType") 0 Public (FuncType (TCons ("Curry.Types","CaseType") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.CaseType") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","CaseType") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.CaseType") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","CaseType") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Alt") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Alt") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Alt") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661._#lambda1665") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661._#lambda1665._#lambda1669") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Pattern") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Alt._#lambda1658._#lambda1661._#lambda1665._#lambda1669._#lambda1673") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Curry.Types","Pattern") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","Rhs") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Alt") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Alt") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Alt") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Alt") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Alt") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Alt") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Alt") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Field") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Field") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Field") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678._#lambda1682") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.SpanInfo","SpanInfo") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678._#lambda1682._#lambda1686") 4 Private (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","QualIdent") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Field._#lambda1675._#lambda1678._#lambda1682._#lambda1686._#lambda1690") 4 Private (FuncType (TCons ("Curry.Ident","QualIdent") []) (FuncType (TCons ("Curry.SpanInfo","SpanInfo") []) (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Field") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Field") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Field") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Field") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Field") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Field") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Var") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Var") 3 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Eq") [TVar 0]) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (TCons ("Prelude","Bool") [])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Var") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var") 3 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692") 2 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692._#lambda1695") 3 Private (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692._#lambda1695._#lambda1699") 2 Private (FuncType (TCons ("Prelude","(,)") [TVar 0,TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Var._#lambda1692._#lambda1695._#lambda1699._#lambda1703") 3 Private (FuncType (TVar 0) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Ident","Ident") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Var") [TVar 0],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Read") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Var") [TVar 0]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Var") 3 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Var") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Var") 1 Public (FuncType (TCons ("Prelude","_Dict#Show") [TVar 0]) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Var") [TVar 0]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Extension") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Extension") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Extension") 2 Public (FuncType (TCons ("Curry.Types","Extension") []) (FuncType (TCons ("Curry.Types","Extension") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Extension") 0 Public (FuncType (TCons ("Curry.Types","Extension") []) (FuncType (TCons ("Curry.Types","Extension") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Extension") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Extension") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705._#lambda1708") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705._#lambda1708._#lambda1712") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Position","Position") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1705._#lambda1708._#lambda1712._#lambda1716") 3 Private (FuncType (TCons ("Curry.Position","Position") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718._#lambda1721") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718._#lambda1721._#lambda1725") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Position","Position") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Extension._#lambda1718._#lambda1721._#lambda1725._#lambda1729") 3 Private (FuncType (TCons ("Curry.Position","Position") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Extension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Extension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Extension") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Extension") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Extension") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Extension") 0 Public (FuncType (TCons ("Curry.Types","Extension") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Extension") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Extension") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Extension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Extension") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.KnownExtension") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","KnownExtension") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.KnownExtension") 2 Public (FuncType (TCons ("Curry.Types","KnownExtension") []) (FuncType (TCons ("Curry.Types","KnownExtension") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.KnownExtension") 0 Public (FuncType (TCons ("Curry.Types","KnownExtension") []) (FuncType (TCons ("Curry.Types","KnownExtension") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.KnownExtension") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","KnownExtension") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1731") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1731._#lambda1734") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1736") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1736._#lambda1739") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1741") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1741._#lambda1744") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1746") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1746._#lambda1749") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1751") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1751._#lambda1754") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1756") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.KnownExtension._#lambda1756._#lambda1759") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","KnownExtension") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.KnownExtension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","KnownExtension") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.KnownExtension") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","KnownExtension") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.KnownExtension") 0 Public (FuncType (TCons ("Curry.Types","KnownExtension") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.KnownExtension") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","KnownExtension") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.KnownExtension") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","KnownExtension") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Eq#Curry.Types.Tool") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Types","Tool") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#==#Prelude.Eq#Curry.Types.Tool") 2 Public (FuncType (TCons ("Curry.Types","Tool") []) (FuncType (TCons ("Curry.Types","Tool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#/=#Prelude.Eq#Curry.Types.Tool") 0 Public (FuncType (TCons ("Curry.Types","Tool") []) (FuncType (TCons ("Curry.Types","Tool") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Read#Curry.Types.Tool") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Types","Tool") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1761") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1761._#lambda1764") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1766") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1766._#lambda1769") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1771") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1771._#lambda1774") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1776") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1776._#lambda1779") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1781") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1781._#lambda1784") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readsPrec#Prelude.Read#Curry.Types.Tool._#lambda1781._#lambda1784._#lambda1788") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Types","Tool") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#readList#Prelude.Read#Curry.Types.Tool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Types","Tool") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Types","_inst#Prelude.Show#Curry.Types.Tool") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Types","Tool") []]) (Rule [] (Var 0)),Func ("Curry.Types","_impl#show#Prelude.Show#Curry.Types.Tool") 0 Public (FuncType (TCons ("Curry.Types","Tool") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showsPrec#Prelude.Show#Curry.Types.Tool") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Types","Tool") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Types","_impl#showList#Prelude.Show#Curry.Types.Tool") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Types","Tool") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0))] []