Prog "Curry.Span" ["Curry.Position","Prelude"] [Type ("Curry.Span","Span") Public [] [Cons ("Curry.Span","Span") 2 Public [TCons ("Curry.Position","Position") [],TCons ("Curry.Position","Position") []],Cons ("Curry.Span","NoSpan") 0 Public []]] [Func ("Curry.Span","_inst#Prelude.Eq#Curry.Span.Span") 0 Public (TCons ("Prelude","_Dict#Eq") [TCons ("Curry.Span","Span") []]) (Rule [] (Var 0)),Func ("Curry.Span","_impl#==#Prelude.Eq#Curry.Span.Span") 2 Public (FuncType (TCons ("Curry.Span","Span") []) (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Span","_impl#/=#Prelude.Eq#Curry.Span.Span") 0 Public (FuncType (TCons ("Curry.Span","Span") []) (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Span","_inst#Prelude.Show#Curry.Span.Span") 0 Public (TCons ("Prelude","_Dict#Show") [TCons ("Curry.Span","Span") []]) (Rule [] (Var 0)),Func ("Curry.Span","_impl#show#Prelude.Show#Curry.Span.Span") 0 Public (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])) (Rule [] (Var 0)),Func ("Curry.Span","_impl#showsPrec#Prelude.Show#Curry.Span.Span") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Curry.Span","Span") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []])))) (Rule [] (Var 0)),Func ("Curry.Span","_impl#showList#Prelude.Show#Curry.Span.Span") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Span","Span") []]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]))) (Rule [] (Var 0)),Func ("Curry.Span","_inst#Prelude.Read#Curry.Span.Span") 0 Public (TCons ("Prelude","_Dict#Read") [TCons ("Curry.Span","Span") []]) (Rule [] (Var 0)),Func ("Curry.Span","_impl#readsPrec#Prelude.Read#Curry.Span.Span") 2 Public (FuncType (TCons ("Prelude","Int") []) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Span","_impl#readsPrec#Prelude.Read#Curry.Span.Span._#lambda1") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Span","_impl#readsPrec#Prelude.Read#Curry.Span.Span._#lambda1._#lambda4") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Span","_impl#readsPrec#Prelude.Read#Curry.Span.Span._#lambda1._#lambda4._#lambda8") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Position","Position") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Span","_impl#readsPrec#Prelude.Read#Curry.Span.Span._#lambda1._#lambda4._#lambda8._#lambda12") 3 Private (FuncType (TCons ("Curry.Position","Position") []) (FuncType (TCons ("Prelude","(,)") [TCons ("Curry.Position","Position") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])))) (Rule [] (Var 0)),Func ("Curry.Span","_impl#readsPrec#Prelude.Read#Curry.Span.Span._#lambda14") 1 Private (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Span","_impl#readsPrec#Prelude.Read#Curry.Span.Span._#lambda14._#lambda17") 2 Private (FuncType (TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Prelude","Char") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]) (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Curry.Span","Span") [],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]]))) (Rule [] (Var 0)),Func ("Curry.Span","_impl#readList#Prelude.Read#Curry.Span.Span") 0 Public (FuncType (TCons ("Prelude","[]") [TCons ("Prelude","Char") []]) (TCons ("Prelude","[]") [TCons ("Prelude","(,)") [TCons ("Prelude","[]") [TCons ("Curry.Span","Span") []],TCons ("Prelude","[]") [TCons ("Prelude","Char") []]]])) (Rule [] (Var 0)),Func ("Curry.Span","start") 1 Public (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Curry.Position","Position") [])) (Rule [] (Var 0)),Func ("Curry.Span","end") 1 Public (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Curry.Position","Position") [])) (Rule [] (Var 0)),Func ("Curry.Span","isSpan") 1 Public (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Curry.Span","isNoSpan") 1 Public (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Prelude","Bool") [])) (Rule [] (Var 0)),Func ("Curry.Span","fromPosition") 1 Public (FuncType (TCons ("Curry.Position","Position") []) (TCons ("Curry.Span","Span") [])) (Rule [] (Var 0)),Func ("Curry.Span","stripStart") 0 Public (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Curry.Span","Span") [])) (Rule [] (Var 0)),Func ("Curry.Span","vertDist") 2 Public (FuncType (TCons ("Curry.Span","Span") []) (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Prelude","Int") []))) (Rule [] (Var 0)),Func ("Curry.Span","isAfter") 2 Public (FuncType (TCons ("Curry.Span","Span") []) (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Span","isBefore") 2 Public (FuncType (TCons ("Curry.Span","Span") []) (FuncType (TCons ("Curry.Span","Span") []) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0)),Func ("Curry.Span","isBeforeList") 2 Public (FuncType (TCons ("Curry.Span","Span") []) (FuncType (TCons ("Prelude","[]") [TCons ("Curry.Span","Span") []]) (TCons ("Prelude","Bool") []))) (Rule [] (Var 0))] []